(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    373255,       8058]
NotebookOptionsPosition[    358958,       7813]
NotebookOutlinePosition[    359472,       7832]
CellTagsIndexPosition[    359429,       7829]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Algebra Problems", "Section",
 CellChangeTimes->{{3.8015757489371843`*^9, 
  3.8015757547286253`*^9}},ExpressionUUID->"24849ddf-4649-48cc-b43a-\
ba6c21602bd9"],

Cell[CellGroupData[{

Cell["Algebra", "Subsection",
 CellChangeTimes->{{3.801575772601673*^9, 
  3.801575774329835*^9}},ExpressionUUID->"7156ced0-7cd4-4c01-82ad-\
ca191c77149d"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "slope through (3, -5) and (1, -1)", 
   Typeset`opts$$ = {
   AppearanceElements -> {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {"Result", "Result", 1, 1, "Output", "-2"}, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "Input", "numsubpods" -> "1", 
     "position" -> "100", "scanner" -> "Identity", "title" -> 
     "Input interpretation"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              TagBox[
               GridBox[{{
                  PaneBox[
                   StyleBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    TagBox[
                    TagBox["\"line\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {$CellContext`GeometryData, "Line"}]], 
                    Identity], {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    TemplateBox[{
                    StyleBox[
                    TagBox["\"points\"", Identity], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\" \"", 
                    StyleBox[
                    RowBox[{
                    RowBox[{"(", "\[NoBreak]", 
                    TemplateBox[{",", "\",\"", 
                    TagBox["3", HoldForm], 
                    TagBox[
                    RowBox[{"-", "5"}], HoldForm]}, "RowWithSeparators"], 
                    "\[NoBreak]", ")"}], 
                    StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                    RowBox[{"(", "\[NoBreak]", 
                    TemplateBox[{",", "\",\"", 
                    TagBox["1", HoldForm], 
                    TagBox[
                    RowBox[{"-", "1"}], HoldForm]}, "RowWithSeparators"], 
                    "\[NoBreak]", ")"}]}], 
                    LinebreakAdjustments -> {1, 10, 0, 0, 100}, LineIndent -> 
                    0]}, "RowDefault"], 
                    TagBox["\"slope\"", Identity]}}, 
                    GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None, None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {1, 1, 1, 1}, "Rows" -> {{0.3}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    $CellContext`TagBoxWrapper["Separator" -> " | "]], 
                    LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                   BaselinePosition -> Center]}}, 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                ColumnsEqual -> False, RowsEqual -> False, 
                GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
                AllowScriptLevelChange -> False], 
               $CellContext`TagBoxWrapper["Separator" -> " | "]], 
              TraditionalForm], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "Result", "numsubpods" -> "1", 
     "position" -> "200", "primary" -> "true", "scanner" -> "Geometry", 
     "title" -> "Result"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["moutput", {}, {"-2"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{"-", "2"}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata,numberdata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Result__Step-by-step solution", "stepbystep" -> "true"}, {}]}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "VisualRepresentation", "numsubpods" -> 
     "1", "position" -> "300", "scanner" -> "Geometry", "title" -> 
     "Visual representation"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"InfiniteLine[{{3, -5}, {1, -1}}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            GraphicsBox[{{
               Directive[
                AbsoluteThickness[1], 
                RGBColor[0.24720000000000014`, 0.24, 0.6], 
                FaceForm[
                 RGBColor[
                  NCache[{1, 
                    Rational[254, 255], 
                    Rational[209, 255]}, {
                   1, 0.996078431372549, 0.8196078431372549}]]]], {
                TagBox[
                 ConicHullRegionBox[{{3, -5}, {1, -1}}], 
                 "InfiniteLine"]}}, {}, {{{
                 PointBox[{3, -5}], 
                 InsetBox[
                  FormBox[
                   RowBox[{"(", "\[NoBreak]", 
                    TemplateBox[{",", "\",\"", "3", 
                    RowBox[{"-", "5"}]}, "RowWithSeparators"], "\[NoBreak]", 
                    ")"}], TraditionalForm], {3, -5}, {-1, 1}]}, {
                 PointBox[{1, -1}], 
                 InsetBox[
                  FormBox[
                   RowBox[{"(", "\[NoBreak]", 
                    TemplateBox[{",", "\",\"", "1", 
                    RowBox[{"-", "1"}]}, "RowWithSeparators"], "\[NoBreak]", 
                    ")"}], TraditionalForm], {1, -1}, {-1, 1}]}}}}, {
             AspectRatio -> 1., Axes -> True, AxesLabel -> {
                FormBox["x", TraditionalForm], 
                FormBox["y", TraditionalForm]}, 
              ImageSize -> {330., {533.9512162874653}}, 
              PlotRange -> {{-1., 5.}, {-6., 0.}}, PlotRangePadding -> 
              Scaled[0.04], Ticks -> True}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "Properties", "numsubpods" -> "1", 
     "position" -> "400", "scanner" -> "Geometry", "title" -> 
     "Properties of line"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  PaneBox[
                   TemplateBox[{
                    StyleBox["x", Italic, StripOnInput -> False], 
                    "\"\[Hyphen]intercept\""}, "RowDefault"], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 RowBox[{
                   FractionBox["1", "2"], "\[LongEqual]", "0.5`"}]}, {
                 TagBox[
                  PaneBox[
                   TemplateBox[{
                    StyleBox["y", Italic, StripOnInput -> False], 
                    "\"\[Hyphen]intercept\""}, "RowDefault"], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], "1"}, {
                 TagBox[
                  PaneBox[
                  "\"slope\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 RowBox[{"-", "2"}]}}, 
               GridBoxAlignment -> {
                "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}}, 
               AutoDelete -> False, 
               GridBoxBackground -> {"Columns" -> {None, None}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,numberdata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {"name" -> "More", "input" -> "Properties__More"}, {}]}]}], 
   Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
   Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
   Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
   Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
   Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
   Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
   Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
   Typeset`pod33$$, Typeset`pod34$$, Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {True, False, {False}, True},
    Typeset`aux3$$ = {True, False, {False}, True}, Typeset`aux4$$ = {
   True, False, {False}, True}, Typeset`aux5$$ = {True, False, {False}, True},
    Typeset`aux6$$ = {True, False, {False}, True}, Typeset`aux7$$ = {
   True, False, {False}, True}, Typeset`aux8$$ = {True, False, {False}, True},
    Typeset`aux9$$ = {True, False, {False}, True}, Typeset`aux10$$ = {
   True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False}, True}, Typeset`aux12$$ = {
   True, False, {False}, True}, Typeset`aux13$$ = {
   True, False, {False}, True}, Typeset`aux14$$ = {
   True, False, {False}, True}, Typeset`aux15$$ = {
   True, False, {False}, True}, Typeset`aux16$$ = {
   True, False, {False}, True}, Typeset`aux17$$ = {
   True, False, {False}, True}, Typeset`aux18$$ = {
   True, False, {False}, True}, Typeset`aux19$$ = {
   True, False, {False}, True}, Typeset`aux20$$ = {
   True, False, {False}, True}, Typeset`aux21$$ = {
   True, False, {False}, True}, Typeset`aux22$$ = {
   True, False, {False}, True}, Typeset`aux23$$ = {
   True, False, {False}, True}, Typeset`aux24$$ = {
   True, False, {False}, True}, Typeset`aux25$$ = {
   True, False, {False}, True}, Typeset`aux26$$ = {
   True, False, {False}, True}, Typeset`aux27$$ = {
   True, False, {False}, True}, Typeset`aux28$$ = {
   True, False, {False}, True}, Typeset`aux29$$ = {
   True, False, {False}, True}, Typeset`aux30$$ = {
   True, False, {False}, True}, Typeset`aux31$$ = {
   True, False, {False}, True}, Typeset`aux32$$ = {
   True, False, {False}, True}, Typeset`aux33$$ = {
   True, False, {False}, True}, Typeset`aux34$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], 
   Typeset`queryinfo$$ = {{
    "success" -> "true", "error" -> "false", "numpods" -> "4", "datatypes" -> 
     "", "timedout" -> "Identity", "timedoutpods" -> "", "timing" -> "2.769", 
     "parsetiming" -> "0.604", "parsetimedout" -> "false", "recalculate" -> 
     "https://www5b.wolframalpha.com/api/v1/recalc.jsp?id=\
MSPa77041di74c167b81179a000029654gi4ceegdfd87113371518146264914", "id" -> 
     "MSP77051di74c167b81179a00000gc2541f19db5d13", "host" -> 
     "https://www5b.wolframalpha.com", "server" -> "55", "related" -> 
     "https://www5b.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa77061di74c167b81179a000068h7461big5c6ad37113371518146264914", "version" -> 
     "2.6"}, {"success" -> "true", "error" -> "false", "numpods" -> "0", 
     "datatypes" -> "", "timedout" -> "", "timedoutpods" -> "", "timing" -> 
     "1.6280000000000001", "parsetiming" -> "0.", "parsetimedout" -> "false", 
     "recalculate" -> "", "id" -> "", "parseidserver" -> "5", "host" -> 
     "https://www5b.wolframalpha.com", "server" -> "5", "related" -> "", 
     "version" -> "2.6"}}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 2., 
    "Date" -> {2020, 6, 19, 19, 18, 18.4754744`9.019170538777129}, "Line" -> 
    4, "SessionID" -> 23180306378915507075}, Typeset`showpods$$ = {1, 2, 3, 
   4}, Typeset`failedpods$$ = {5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 
   18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34}, 
   Typeset`chosen$$ = {"Result", "Result", 1, 1, "Output", "-2"}, 
   Typeset`open$$ = False, Typeset`newq$$ = 
   "slope through (3, -5) and (1, -1)"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
         Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
         Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
         Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
         Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
         Typeset`pod33$$, Typeset`pod34$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
         Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
         Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
         Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
         Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
         Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
         Typeset`aux33$$, Typeset`aux34$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{337., {71., 27.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; AlphaIntegration`DoAsyncInitialization[
       Hold[{
        2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
          Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
          Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
          Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
          Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
          Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
          Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
          Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
          Typeset`pod33$$, Typeset`pod34$$}, {
         Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
          Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
          Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
          Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
          Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
          Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
          Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
          Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
          Typeset`aux33$$, Typeset`aux34$$}, Typeset`chosen$$, Typeset`open$$,
          Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
         Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
         Typeset`failedpods$$, Typeset`newq$$, 
         "https://www5b.wolframalpha.com/api/v1/recalc.jsp?id=\
MSPa77041di74c167b81179a000029654gi4ceegdfd87113371518146264914", 
         Typeset`asyncpods$$}]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[4]:=",ExpressionUUID->"2975ce12-a737-4c67-ae99-fa4aba4b7077"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "intersection  3x+2y=7;x-3y=6", 
   Typeset`opts$$ = {
   AppearanceElements -> {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {"Result", "Result", 1, 1, "Content"}, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}, 
      "ExtrusionOpen" -> False}}, Typeset`elements$$ = {
   "Extrusion", "Warnings", "Assumptions", "Pods"}, Typeset`pod1$$ = 
   XMLElement[
   "pod", {"error" -> "false", "id" -> "Input", "numsubpods" -> "1", 
     "position" -> "100", "scanner" -> "Identity", "title" -> 
     "Input interpretation"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              TagBox[
               GridBox[{{
                  PaneBox[
                   StyleBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"intersection\"", {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}]}}, 
                    GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949]}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {"Columns" -> {2, 2}, "Rows" -> {{1}}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    $CellContext`TagBoxWrapper["Separator" -> " | "]], 
                    LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                   BaselinePosition -> Center], 
                  PaneBox[
                   StyleBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    FormBox[
                    TagBox[
                    GridBox[{{
                    PaneBox[
                    StyleBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    TagBox[
                    TagBox["\"line\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {$CellContext`GeometryData, "Line"}]], 
                    Identity], {LineIndent -> 0, 
                    LineSpacing -> {0.9, 0, 1.5}}], 
                    TemplateBox[{
                    StyleBox[
                    TagBox["\"Cartesian equation\"", Identity], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\" \"", 
                    TagBox[
                    RowBox[{
                    RowBox[{
                    RowBox[{"3", " ", "x"}], "+", 
                    RowBox[{"2", " ", "y"}]}], "\[LongEqual]", "7"}], 
                    HoldForm]}, "RowDefault"]}}, 
                    GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {1, 1, 1}, "Rows" -> {{0.3}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    $CellContext`TagBoxWrapper["Separator" -> " | "]], 
                    LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                    BaselinePosition -> Center]}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
                    AllowScriptLevelChange -> False], 
                    $CellContext`TagBoxWrapper["Separator" -> " | "]], 
                    TraditionalForm], HoldForm]}, {
                    TagBox[
                    FormBox[
                    TagBox[
                    GridBox[{{
                    PaneBox[
                    StyleBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    TagBox[
                    TagBox["\"line\"", 
                    $CellContext`TagBoxWrapper[
                    "Entity" -> {$CellContext`GeometryData, "Line"}]], 
                    Identity], {LineIndent -> 0, 
                    LineSpacing -> {0.9, 0, 1.5}}], 
                    TemplateBox[{
                    StyleBox[
                    TagBox["\"Cartesian equation\"", Identity], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\" \"", 
                    TagBox[
                    RowBox[{
                    RowBox[{"x", "-", 
                    RowBox[{"3", " ", "y"}]}], "\[LongEqual]", "6"}], 
                    HoldForm]}, "RowDefault"]}}, 
                    GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {1, 1, 1}, "Rows" -> {{0.3}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    $CellContext`TagBoxWrapper["Separator" -> " | "]], 
                    LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                    BaselinePosition -> Center]}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
                    AllowScriptLevelChange -> False], 
                    $CellContext`TagBoxWrapper["Separator" -> " | "]], 
                    TraditionalForm], HoldForm]}}, 
                    GridBoxBackground -> {
                    "Columns" -> {None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {"Columns" -> {2, 2}, "Rows" -> {{1}}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 
                    Automatic], 
                    $CellContext`TagBoxWrapper["Separator" -> " | "]], 
                    LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                   BaselinePosition -> Center]}}, 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                ColumnsEqual -> False, RowsEqual -> False, 
                GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
                AllowScriptLevelChange -> False], 
               $CellContext`TagBoxWrapper["Separator" -> " | "]], 
              TraditionalForm], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "Result", "numsubpods" -> "1", 
     "position" -> "200", "primary" -> "true", "scanner" -> "Geometry", 
     "title" -> "Result"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{"(", "\[NoBreak]", 
              TemplateBox[{",", "\",\"", "3", 
                RowBox[{"-", "1"}]}, "RowWithSeparators"], "\[NoBreak]", 
              ")"}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,numberdata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Visual representation", "scanner" -> "Geometry", "id" -> 
     "VisualRepresentation", "position" -> "300", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            GraphicsBox[{{{
                Directive[
                 AbsoluteThickness[1], 
                 RGBColor[0.24720000000000014`, 0.24, 0.6], 
                 FaceForm[
                  RGBColor[
                   NCache[{1, 
                    Rational[254, 255], 
                    Rational[209, 255]}, {
                    1, 0.996078431372549, 0.8196078431372549}]]]], {
                 TagBox[
                  ConicHullRegionBox[
                   NCache[{{
                    Rational[21, 13], 
                    Rational[14, 13]}, {
                    Rational[7, 3], 0}}, {{1.6153846153846154`, 
                    1.0769230769230769`}, {2.3333333333333335`, 0}}]], 
                  "InfiniteLine"]}}, {}, {}}, {{
                Directive[
                 AbsoluteThickness[1], 
                 RGBColor[0.24720000000000014`, 0.24, 0.6], 
                 FaceForm[
                  RGBColor[
                   NCache[{1, 
                    Rational[254, 255], 
                    Rational[209, 255]}, {
                    1, 0.996078431372549, 0.8196078431372549}]]]], {
                 TagBox[
                  ConicHullRegionBox[
                   NCache[{{
                    Rational[3, 5], 
                    Rational[-9, 5]}, {6, 0}}, {{0.6, -1.8}, {6, 0}}]], 
                  "InfiniteLine"]}}, {}, {}}, {{
                Directive[
                 AbsoluteThickness[1], 
                 FaceForm[
                  RGBColor[
                   NCache[{1, 
                    Rational[254, 255], 
                    Rational[209, 255]}, {
                    1, 0.996078431372549, 0.8196078431372549}]]]], {
                 PointBox[{3, -1}]}}, {}, {}}}, {
             AspectRatio -> 1., Axes -> True, AxesLabel -> {
                FormBox["x", TraditionalForm], 
                FormBox["y", TraditionalForm]}, 
              ImageSize -> {330., {533.9512162874653}}, 
              PlotRange -> {{-0.7500000000000009, 
               7.3500000000000005`}, {-4.501923076923077, 3.598076923076924}},
               PlotRangePadding -> Scaled[0.04], Ticks -> Automatic}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Equation", "scanner" -> "Geometry", "id" -> "Equation",
      "position" -> "400", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"x == 3 && y == -1"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              StyleBox["\" and \"", {
                GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                LineIndent -> 0}], 
              RowBox[{"x", "\[LongEqual]", "3"}], 
              RowBox[{"y", "\[LongEqual]", 
                RowBox[{"-", "1"}]}]}, "RowWithSeparator"], TraditionalForm]],
           "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext,minput"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
   Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
   Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
   Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
   Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
   Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
   Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {True, False, {False}, True},
    Typeset`aux4$$ = {True, False, {False}, True}, Typeset`aux5$$ = {
   True, False, {False}, True}, Typeset`aux6$$ = {True, False, {False}, True},
    Typeset`aux7$$ = {True, False, {False}, True}, Typeset`aux8$$ = {
   True, False, {False}, True}, Typeset`aux9$$ = {True, False, {False}, True},
    Typeset`aux10$$ = {True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False}, True}, Typeset`aux12$$ = {
   True, False, {False}, True}, Typeset`aux13$$ = {
   True, False, {False}, True}, Typeset`aux14$$ = {
   True, False, {False}, True}, Typeset`aux15$$ = {
   True, False, {False}, True}, Typeset`aux16$$ = {
   True, False, {False}, True}, Typeset`aux17$$ = {
   True, False, {False}, True}, Typeset`aux18$$ = {
   True, False, {False}, True}, Typeset`aux19$$ = {
   True, False, {False}, True}, Typeset`aux20$$ = {
   True, False, {False}, True}, Typeset`aux21$$ = {
   True, False, {False}, True}, Typeset`aux22$$ = {
   True, False, {False}, True}, Typeset`aux23$$ = {
   True, False, {False}, True}, Typeset`aux24$$ = {
   True, False, {False}, True}, Typeset`aux25$$ = {
   True, False, {False}, True}, Typeset`aux26$$ = {
   True, False, {False}, True}, Typeset`aux27$$ = {
   True, False, {False}, True}, Typeset`aux28$$ = {
   True, False, {False}, True}, Typeset`aux29$$ = {
   True, False, {False}, True}, Typeset`aux30$$ = {
   True, False, {False}, True}, Typeset`aux31$$ = {
   True, False, {False}, True}, Typeset`aux32$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], 
   Typeset`queryinfo$$ = {{
    "success" -> "true", "error" -> "false", "numpods" -> "2", "datatypes" -> 
     "", "timedout" -> "Geometry,PlanetaryAstronomy,Data,Character", 
     "timedoutpods" -> "", "timing" -> "4.333", "parsetiming" -> "0.834", 
     "parsetimedout" -> "false", "recalculate" -> 
     "https://www5b.wolframalpha.com/api/v1/recalc.jsp?id=\
MSPa591159hch28fba0hc5b0000662h2c1i571a28c39205290377631926689", "id" -> 
     "MSP592159hch28fba0hc5b00004104bg7864ef266c", "host" -> 
     "https://www5b.wolframalpha.com", "server" -> "34", "related" -> 
     "https://www5b.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa593159hch28fba0hc5b00003d4f5e9bdd23f3999205290377631926689", "version" -> 
     "2.6"}, {"success" -> "true", "error" -> "false", "numpods" -> "2", 
     "datatypes" -> "", "timedout" -> "", "timedoutpods" -> "", "timing" -> 
     "4.441", "parsetiming" -> "0.", "parsetimedout" -> "false", 
     "recalculate" -> "", "id" -> "", "parseidserver" -> "34", "host" -> 
     "https://www5b.wolframalpha.com", "server" -> "34", "related" -> "", 
     "version" -> "2.6"}}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 2., 
    "Date" -> {2020, 6, 19, 19, 19, 55.6699605`9.49819575230407}, "Line" -> 6,
     "SessionID" -> 23180306378915507075}, Typeset`showpods$$ = {1, 2, 3, 4}, 
   Typeset`failedpods$$ = {5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 
   19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32}, 
   Typeset`chosen$$ = {"Result", "Result", 1, 1, "Content"}, Typeset`open$$ = 
   False, Typeset`newq$$ = "intersection  3x+2y=7;x-3y=6"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
         Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
         Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
         Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
         Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, 
         Typeset`pod32$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
         Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
         Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
         Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
         Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
         Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{325., {41., 27.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; AlphaIntegration`DoAsyncInitialization[
       Hold[{
        2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
          Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
          Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
          Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
          Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
          Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
          Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
          Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, 
          Typeset`pod32$$}, {
         Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
          Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
          Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
          Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
          Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
          Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
          Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
          Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$},
          Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
         Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
         Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
         Typeset`newq$$, 
         "https://www5b.wolframalpha.com/api/v1/recalc.jsp?id=\
MSPa591159hch28fba0hc5b0000662h2c1i571a28c39205290377631926689", 
         Typeset`asyncpods$$}]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[6]:=",ExpressionUUID->"f2d98b55-74c0-4fbc-98c5-2f0b4e0cde88"],

Cell[BoxData[
 InterpretationBox[
  FrameBox[
   StyleBox[
    FormBox[
     RowBox[{"(", "\[NoBreak]", 
      TemplateBox[{",", "\",\"", "3", 
        RowBox[{"-", "1"}]},
       "RowWithSeparators"], "\[NoBreak]", ")"}],
     TraditionalForm], "Output",
    CellSize->{550, Automatic},
    AutoStyleOptions->{"HighlightFormattingErrors"->False},
    ScriptLevel->0,
    NumberPoint->".",
    RenderingOptions->{"3DRenderingMethod"->"BSPTreeOrDepthBuffer"},
    FontFamily->"Times",
    FontSize->14,
    Background->None,
    GraphicsBoxOptions->{DefaultAxesStyle->Directive[
      GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 1, 
      "GraphicsAxes"],
    DefaultBaseStyle->{FontFamily -> "Times", "Graphics"},
    DefaultFrameStyle->Directive[
      GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 1, 
      "GraphicsFrame"],
    DefaultFrameTicksStyle->Directive[
     FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"],
    DefaultTicksStyle->Directive[
     FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]},
    Graphics3DBoxOptions->{
    DefaultBaseStyle->{FontFamily -> "Times", "Graphics3D"}}],
   BaseStyle->{Plain},
   FrameMargins->10,
   FrameStyle->GrayLevel[0.85],
   RoundingRadius->5,
   StripOnInput->False],
  WolframAlphaResult[
  "intersection  3x+2y=7;x-3y=6", {{"Result", 1}, "Content"}]]], "Input",
 CellChangeTimes->{{3.801576025832939*^9, 
  3.801576027393982*^9}},ExpressionUUID->"5c1873f8-d453-45f1-a713-\
e61e26a2947b"],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryParseResults",
  DynamicModuleBox[{Typeset`q$$ = "simplify (1/x + 1/y)^-1", Typeset`newq$$ = 
   "simplify (1/x + 1/y)^-1", Typeset`chosen$$ = "Simplify[(1/x + 1/y)^(-1)]",
    Typeset`open$$ = False}, 
   PaneSelectorBox[{False->
    DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
     WolframAlphaClient`Private`assumptionsQ$$ = False}, 
     TagBox[
      FrameBox[
       TagBox[GridBox[{
          {
           InputFieldBox[Dynamic[Typeset`newq$$], String,
            Appearance->None,
            BaseStyle->{"CalculateInput"},
            ContinuousAction->True,
            Enabled->True,
            FieldSize->{{1, 40}, {1, 
               DirectedInfinity[1]}},
            TrapSelection->False], 
           ItemBox[
            ButtonBox[
             PaneSelectorBox[{True->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "OrangeSquarePlus"],
                 ImageSizeCache->{15., {5., 12.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ], False->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "GraySquarePlus"],
                 ImageSizeCache->{15., {5., 12.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ]}, Dynamic[WolframAlphaClient`Private`show$$],
              ImageSize->All],
             Appearance->None,
             ButtonFunction:>(Quiet[
                WolframAlpha[]]; If[
                Or[
                 CurrentValue["OptionKey"], 
                 CurrentValue["AltKey"]], SelectionMove[
                  ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                  Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                   "TextForm"], All], Typeset`open$$ = True; 
                WolframAlphaClient`Private`extrudeFromFastParse[
                 "simplify (1/x + 1/y)^-1", 
                  Defer[
                   Simplify[(1/$CellContext`x + 1/$CellContext`y)^(-1)]], 
                  "Fast parse"]; Typeset`open$$ = False]),
             Evaluator->Automatic,
             Method->"Queued"],
            Alignment->{Right, Top},
            StripOnInput->False]},
          {
           PaneBox[
            TagBox[
             TooltipBox[
              ButtonBox[
               PaneSelectorBox[{False->
                StyleBox[
                 RowBox[{"Simplify", "[", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"1", "/", "x"}], " ", "+", " ", 
                    RowBox[{"1", "/", "y"}]}], ")"}], "^", 
                   RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}]}], "]"}],
                 StripOnInput->False,
                 NumberMarks->False], True->
                StyleBox[
                 RowBox[{"Simplify", "[", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"1", "/", "x"}], " ", "+", " ", 
                    RowBox[{"1", "/", "y"}]}], ")"}], "^", 
                   RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}]}], "]"}],
                 StripOnInput->False,
                 ShowSyntaxStyles->False,
                 NumberMarks->False,
                 FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                 CurrentValue["MouseOver"]],
                BaseStyle->{ShowStringCharacters -> True},
                FrameMargins->0,
                ImageSize->Automatic],
               Alignment->Left,
               Appearance->None,
               BaseStyle->{},
               ButtonFunction:>(SelectionMove[
                  ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                   BoxData[
                    RowBox[{"Simplify", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"1", "/", "x"}], " ", "+", " ", 
                    RowBox[{"1", "/", "y"}]}], ")"}], "^", 
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}]}], "]"}]], "Input"], All]; 
                SelectionMove[
                  ButtonNotebook[], After, CellContents]),
               Evaluator->Automatic,
               ImageSize->Automatic,
               Method->"Preemptive"],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                StandardForm]]],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
              "Tooltip"]& ],
            AppearanceElements->{},
            BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
            ImageSize->{Automatic, {1, 100}},
            Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
         },
         AutoDelete->False,
         BaselinePosition->{1, 1},
         FrameStyle->GrayLevel[0.85],
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxDividers->{
          "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Grid"],
       Alignment->Top,
       Background->Dynamic[
         FEPrivate`If[
          FEPrivate`And[
           FEPrivate`SameQ[
            FEPrivate`Head[Typeset`newq$$], String], 
           FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
          RGBColor[1., 0.975, 0.95], 
          GrayLevel[1]]],
       BaselinePosition->Baseline,
       FrameStyle->GrayLevel[0.85],
       ImageSize->Automatic,
       RoundingRadius->5,
       StripOnInput->False],
      EventHandlerTag[{
       "MouseEntered" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, True], "MouseExited" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, False], Method -> 
        "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
     DynamicModuleValues:>{}], True->
    TagBox[GridBox[{
       {
        DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
         WolframAlphaClient`Private`assumptionsQ$$ = False}, 
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               InputFieldBox[Dynamic[Typeset`newq$$], String,
                Appearance->None,
                BaseStyle->{"CalculateInput"},
                ContinuousAction->True,
                Enabled->True,
                FieldSize->{{1, 40}, {1, 
                   DirectedInfinity[1]}},
                TrapSelection->False], 
               ItemBox[
                ButtonBox[
                 PaneSelectorBox[{True->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "OrangeSquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ], False->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "GraySquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ]}, Dynamic[
                  WolframAlphaClient`Private`show$$],
                  ImageSize->All],
                 Appearance->None,
                 ButtonFunction:>(Quiet[
                    WolframAlpha[]]; If[
                    Or[
                    CurrentValue["OptionKey"], 
                    CurrentValue["AltKey"]], SelectionMove[
                    ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                    NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                    "TextForm"], All], Typeset`open$$ = True; 
                    WolframAlphaClient`Private`extrudeFromFastParse[
                    "simplify (1/x + 1/y)^-1", 
                    Defer[
                    Simplify[(1/$CellContext`x + 1/$CellContext`y)^(-1)]], 
                    "Fast parse"]; Typeset`open$$ = False]),
                 Evaluator->Automatic,
                 Method->"Queued"],
                Alignment->{Right, Top},
                StripOnInput->False]},
              {
               PaneBox[
                TagBox[
                 TooltipBox[
                  ButtonBox[
                   PaneSelectorBox[{False->
                    StyleBox[
                    RowBox[{"Simplify", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"1", "/", "x"}], " ", "+", " ", 
                    RowBox[{"1", "/", "y"}]}], ")"}], "^", 
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}]}], "]"}],
                    StripOnInput->False,
                    NumberMarks->False], True->
                    StyleBox[
                    RowBox[{"Simplify", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"1", "/", "x"}], " ", "+", " ", 
                    RowBox[{"1", "/", "y"}]}], ")"}], "^", 
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}]}], "]"}],
                    StripOnInput->False,
                    ShowSyntaxStyles->False,
                    NumberMarks->False,
                    FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{ShowStringCharacters -> True},
                    FrameMargins->0,
                    ImageSize->Automatic],
                   Alignment->Left,
                   Appearance->None,
                   BaseStyle->{},
                   ButtonFunction:>(SelectionMove[
                    ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    BoxData[
                    RowBox[{"Simplify", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"1", "/", "x"}], " ", "+", " ", 
                    RowBox[{"1", "/", "y"}]}], ")"}], "^", 
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}]}], "]"}]], "Input"], All]; 
                    SelectionMove[
                    ButtonNotebook[], After, CellContents]),
                   Evaluator->Automatic,
                   ImageSize->Automatic,
                   Method->"Preemptive"],
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                    StandardForm]]],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
                  "Tooltip"]& ],
                AppearanceElements->{},
                BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
                ImageSize->{Automatic, {1, 100}},
                Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             BaselinePosition->{1, 1},
             FrameStyle->GrayLevel[0.85],
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxDividers->{
              "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           Alignment->Top,
           Background->Dynamic[
             FEPrivate`If[
              FEPrivate`And[
               FEPrivate`SameQ[
                FEPrivate`Head[Typeset`newq$$], String], 
               FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
              RGBColor[1., 0.975, 0.95], 
              GrayLevel[1]]],
           BaselinePosition->Baseline,
           FrameStyle->GrayLevel[0.85],
           ImageSize->Automatic,
           RoundingRadius->5,
           StripOnInput->False],
          
          EventHandlerTag[{
           "MouseEntered" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, True], 
            "MouseExited" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, False], Method -> 
            "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
         DynamicModuleValues:>{}]},
       {
        InterpretationBox[
         StyleBox[
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEExpressions", "NecklaceAnimator"][20]],
          AnimatorBoxOptions->{ImageSize->20}],
         Animator[Appearance -> "Necklace", ImageSize -> 20],
         BaseStyle->{"Deploy"}]}
      },
      BaselinePosition->{1, 1},
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     "Column"]}, Dynamic[
     TrueQ[Typeset`open$$]],
    BaseStyle->{Deployed -> True},
    ImageSize->Automatic],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[9]:=",ExpressionUUID->"6f5b6e5f-aab8-4d20-b093-f27b27389549"],

Cell[BoxData[
 FractionBox[
  RowBox[{"x", " ", "y"}], 
  RowBox[{"x", "+", "y"}]]], "Output",
 CellChangeTimes->{3.801576126336773*^9},
 CellLabel->"Out[9]=",ExpressionUUID->"7c5ef4ea-67ea-4f15-8dbe-4c4a184b1844"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     SuperscriptBox["x", "3"], "-", 
     SuperscriptBox["x", "2"], "-", 
     RowBox[{"2", "x"}]}], "\[Equal]", "0"}], ",", "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.8015761350938897`*^9, 3.8015761659701676`*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"dafc6a82-d294-4eba-a37d-b9766780ab0c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", 
     RowBox[{"-", "1"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "2"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.8015761673764267`*^9},
 CellLabel->"Out[10]=",ExpressionUUID->"b7c5fc0f-6747-4016-add6-53fdc263f9dd"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"1.25", "*", 
  SuperscriptBox["10", "8"], "*", 
  RowBox[{"5", "/", "0.25"}]}]], "Input",
 CellChangeTimes->{{3.801576216570127*^9, 3.8015762670817833`*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"9bd37480-cdf1-4118-9143-b16476a55fef"],

Cell[BoxData["2.5`*^9"], "Output",
 CellChangeTimes->{3.801576269994522*^9},
 CellLabel->"Out[11]=",ExpressionUUID->"7d4f12c4-527b-4156-8d8b-ff2bff9052f7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"6", "x"}], "-", 
     RowBox[{"5", "y"}]}], "\[Equal]", "3"}], ",", "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.801576308655199*^9, 3.801576336626649*^9}, {
  3.801576390730832*^9, 3.8015763941377535`*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"65bcf61a-5d69-48f3-bd00-6bb2b645e01b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"x", "\[Rule]", 
    RowBox[{
     FractionBox["1", "6"], " ", 
     RowBox[{"(", 
      RowBox[{"3", "+", 
       RowBox[{"5", " ", "y"}]}], ")"}]}]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{3.8015763416961884`*^9, 3.801576395465947*^9},
 CellLabel->"Out[13]=",ExpressionUUID->"840378ea-c011-48a5-86ee-a67e2803999a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     SuperscriptBox["x", "3"], "+", 
     RowBox[{"a", " ", 
      SuperscriptBox["x", "2"]}], "-", "1"}], "\[Equal]", " ", 
    RowBox[{"-", "1"}]}], ",", "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.8015764460086203`*^9, 3.8015764848105583`*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"b30da5a0-4f75-4b8e-919f-3747d9727cab"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", 
     RowBox[{"-", "a"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.8015764855924053`*^9},
 CellLabel->"Out[14]=",ExpressionUUID->"d9eae492-c19f-4e12-b864-90898880f3eb"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"an", " ", ":=", " ", 
  RowBox[{
   SuperscriptBox["x", "n"], "/", 
   RowBox[{"(", 
    RowBox[{
     SuperscriptBox["2", "n"], 
     RowBox[{"n", "!"}]}], ")"}]}]}]], "Input",
 CellChangeTimes->{{3.80157650969615*^9, 3.801576533601482*^9}},
 CellLabel->"In[15]:=",ExpressionUUID->"499bb61e-594e-419e-b1f2-d6d9e9781000"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{"an", "+", "1"}], ")"}], "/", "an"}]], "Input",
 CellChangeTimes->{{3.801576540183896*^9, 3.8015765566667995`*^9}},
 CellLabel->"In[16]:=",ExpressionUUID->"8e15c069-9dc2-42be-ab6e-c1e464b0f120"],

Cell[BoxData[
 RowBox[{
  SuperscriptBox["2", "n"], " ", 
  SuperscriptBox["x", 
   RowBox[{"-", "n"}]], " ", 
  RowBox[{"(", 
   RowBox[{"1", "+", 
    FractionBox[
     RowBox[{
      SuperscriptBox["2", 
       RowBox[{"-", "n"}]], " ", 
      SuperscriptBox["x", "n"]}], 
     RowBox[{"n", "!"}]]}], ")"}], " ", 
  RowBox[{"n", "!"}]}]], "Output",
 CellChangeTimes->{3.8015765575020237`*^9},
 CellLabel->"Out[16]=",ExpressionUUID->"4cc0950a-5940-488f-aa76-d5ea3736edb1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Simplify", "[", 
  RowBox[{
   SuperscriptBox["2", "n"], " ", 
   SuperscriptBox["x", 
    RowBox[{"-", "n"}]], " ", 
   RowBox[{"(", 
    RowBox[{"1", "+", 
     FractionBox[
      RowBox[{
       SuperscriptBox["2", 
        RowBox[{"-", "n"}]], " ", 
       SuperscriptBox["x", "n"]}], 
      RowBox[{"n", "!"}]]}], ")"}], " ", 
   RowBox[{"n", "!"}]}], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->"In[17]:=",ExpressionUUID->"2495dd87-bab0-4b41-94e2-d3609d9fe12a"],

Cell[BoxData[
 RowBox[{"1", "+", 
  RowBox[{
   SuperscriptBox["2", "n"], " ", 
   SuperscriptBox["x", 
    RowBox[{"-", "n"}]], " ", 
   RowBox[{"n", "!"}]}]}]], "Output",
 CellChangeTimes->{3.80157656540231*^9},
 CellLabel->"Out[17]=",ExpressionUUID->"94127b31-5e0c-49d3-8dbc-2d24a34d07f2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     SuperscriptBox["4", "2"], "+", 
     SuperscriptBox["b", "2"]}], "\[Equal]", 
    SuperscriptBox["8", "2"]}], ",", "b"}], "]"}]], "Input",
 CellChangeTimes->{{3.8015766520089655`*^9, 3.801576756634663*^9}},
 CellLabel->"In[20]:=",ExpressionUUID->"6c486502-f02e-4a25-8f2a-746e03d87c7f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"b", "\[Rule]", 
     RowBox[{
      RowBox[{"-", "4"}], " ", 
      SqrtBox["3"]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", "\[Rule]", 
     RowBox[{"4", " ", 
      SqrtBox["3"]}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.801576721142666*^9, 3.801576756989916*^9}},
 CellLabel->"Out[20]=",ExpressionUUID->"e187d475-db38-4bbb-a0c3-19bc95457830"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"b", "\[Rule]", 
      RowBox[{
       RowBox[{"-", "4"}], " ", 
       SqrtBox["3"]}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"b", "\[Rule]", 
      RowBox[{"4", " ", 
       SqrtBox["3"]}]}], "}"}]}], "}"}], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->"In[21]:=",ExpressionUUID->"d355c15b-4f75-4ae5-8930-9798bbabd8fc"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"b", "\[Rule]", 
     RowBox[{"-", "6.928203230275509`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", "\[Rule]", "6.928203230275509`"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.801576762371626*^9},
 CellLabel->"Out[21]=",ExpressionUUID->"c3855735-7d5b-4160-a14d-16b2a102f055"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryParseResults",
  DynamicModuleBox[{Typeset`q$$ = "surface area of sphere with radius 2 ", 
   Typeset`newq$$ = "surface area of sphere with radius 2 ", 
   Typeset`chosen$$ = "Area[Sphere[{0, 0, 0}, 2]]", Typeset`open$$ = False}, 
   PaneSelectorBox[{False->
    DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
     WolframAlphaClient`Private`assumptionsQ$$ = False}, 
     TagBox[
      FrameBox[
       TagBox[GridBox[{
          {
           InputFieldBox[Dynamic[Typeset`newq$$], String,
            Appearance->None,
            BaseStyle->{"CalculateInput"},
            ContinuousAction->True,
            Enabled->True,
            FieldSize->{{1, 40}, {1, 
               DirectedInfinity[1]}},
            TrapSelection->False], 
           ItemBox[
            ButtonBox[
             PaneSelectorBox[{True->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "OrangeSquarePlus"],
                 ImageSizeCache->{13., {4., 10.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ], False->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "GraySquarePlus"],
                 ImageSizeCache->{13., {4., 10.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ]}, Dynamic[WolframAlphaClient`Private`show$$],
              ImageSize->All],
             Appearance->None,
             ButtonFunction:>(Quiet[
                WolframAlpha[]]; If[
                Or[
                 CurrentValue["OptionKey"], 
                 CurrentValue["AltKey"]], SelectionMove[
                  ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                  Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                   "TextForm"], All], Typeset`open$$ = True; 
                WolframAlphaClient`Private`extrudeFromFastParse[
                 "surface area of sphere with radius 2 ", 
                  Defer[
                   Area[
                    Sphere[{0, 0, 0}, 2]]], "Fast parse"]; 
                Typeset`open$$ = False]),
             Evaluator->Automatic,
             Method->"Queued"],
            Alignment->{Right, Top},
            StripOnInput->False]},
          {
           PaneBox[
            TagBox[
             TooltipBox[
              ButtonBox[
               PaneSelectorBox[{False->
                StyleBox[
                 RowBox[{"Area", "[", 
                  RowBox[{"Sphere", "[", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", " ", "0", ",", " ", "0"}], "}"}], ",", 
                    " ", "2"}], "]"}], "]"}],
                 StripOnInput->False,
                 NumberMarks->False], True->
                StyleBox[
                 RowBox[{"Area", "[", 
                  RowBox[{"Sphere", "[", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", " ", "0", ",", " ", "0"}], "}"}], ",", 
                    " ", "2"}], "]"}], "]"}],
                 StripOnInput->False,
                 ShowSyntaxStyles->False,
                 NumberMarks->False,
                 FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                 CurrentValue["MouseOver"]],
                BaseStyle->{ShowStringCharacters -> True},
                FrameMargins->0,
                ImageSize->Automatic],
               Alignment->Left,
               Appearance->None,
               BaseStyle->{},
               ButtonFunction:>(SelectionMove[
                  ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                   BoxData[
                    RowBox[{"Area", "[", 
                    RowBox[{"Sphere", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", " ", "0", ",", " ", "0"}], "}"}], ",", 
                    " ", "2"}], "]"}], "]"}]], "Input"], All]; SelectionMove[
                  ButtonNotebook[], After, CellContents]),
               Evaluator->Automatic,
               ImageSize->Automatic,
               Method->"Preemptive"],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                StandardForm]]],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
              "Tooltip"]& ],
            AppearanceElements->{},
            BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
            ImageSize->{Automatic, {1, 100}},
            Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
         },
         AutoDelete->False,
         BaselinePosition->{1, 1},
         FrameStyle->GrayLevel[0.85],
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxDividers->{
          "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Grid"],
       Alignment->Top,
       Background->Dynamic[
         FEPrivate`If[
          FEPrivate`And[
           FEPrivate`SameQ[
            FEPrivate`Head[Typeset`newq$$], String], 
           FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
          RGBColor[1., 0.975, 0.95], 
          GrayLevel[1]]],
       BaselinePosition->Baseline,
       FrameStyle->GrayLevel[0.85],
       ImageSize->Automatic,
       RoundingRadius->5,
       StripOnInput->False],
      EventHandlerTag[{
       "MouseEntered" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, True], "MouseExited" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, False], Method -> 
        "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
     DynamicModuleValues:>{}], True->
    TagBox[GridBox[{
       {
        DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
         WolframAlphaClient`Private`assumptionsQ$$ = False}, 
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               InputFieldBox[Dynamic[Typeset`newq$$], String,
                Appearance->None,
                BaseStyle->{"CalculateInput"},
                ContinuousAction->True,
                Enabled->True,
                FieldSize->{{1, 40}, {1, 
                   DirectedInfinity[1]}},
                TrapSelection->False], 
               ItemBox[
                ButtonBox[
                 PaneSelectorBox[{True->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "OrangeSquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ], False->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "GraySquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ]}, Dynamic[
                  WolframAlphaClient`Private`show$$],
                  ImageSize->All],
                 Appearance->None,
                 ButtonFunction:>(Quiet[
                    WolframAlpha[]]; If[
                    Or[
                    CurrentValue["OptionKey"], 
                    CurrentValue["AltKey"]], SelectionMove[
                    ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                    NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                    "TextForm"], All], Typeset`open$$ = True; 
                    WolframAlphaClient`Private`extrudeFromFastParse[
                    "surface area of sphere with radius 2 ", 
                    Defer[
                    Area[
                    Sphere[{0, 0, 0}, 2]]], "Fast parse"]; 
                    Typeset`open$$ = False]),
                 Evaluator->Automatic,
                 Method->"Queued"],
                Alignment->{Right, Top},
                StripOnInput->False]},
              {
               PaneBox[
                TagBox[
                 TooltipBox[
                  ButtonBox[
                   PaneSelectorBox[{False->
                    StyleBox[
                    RowBox[{"Area", "[", 
                    RowBox[{"Sphere", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", " ", "0", ",", " ", "0"}], "}"}], ",", 
                    " ", "2"}], "]"}], "]"}],
                    StripOnInput->False,
                    NumberMarks->False], True->
                    StyleBox[
                    RowBox[{"Area", "[", 
                    RowBox[{"Sphere", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", " ", "0", ",", " ", "0"}], "}"}], ",", 
                    " ", "2"}], "]"}], "]"}],
                    StripOnInput->False,
                    ShowSyntaxStyles->False,
                    NumberMarks->False,
                    FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{ShowStringCharacters -> True},
                    FrameMargins->0,
                    ImageSize->Automatic],
                   Alignment->Left,
                   Appearance->None,
                   BaseStyle->{},
                   ButtonFunction:>(SelectionMove[
                    ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    BoxData[
                    RowBox[{"Area", "[", 
                    RowBox[{"Sphere", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", " ", "0", ",", " ", "0"}], "}"}], ",", 
                    " ", "2"}], "]"}], "]"}]], "Input"], All]; SelectionMove[
                    ButtonNotebook[], After, CellContents]),
                   Evaluator->Automatic,
                   ImageSize->Automatic,
                   Method->"Preemptive"],
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                    StandardForm]]],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
                  "Tooltip"]& ],
                AppearanceElements->{},
                BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
                ImageSize->{Automatic, {1, 100}},
                Scrollbars->{False, Automatic}], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             BaselinePosition->{1, 1},
             FrameStyle->GrayLevel[0.85],
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxDividers->{
              "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           Alignment->Top,
           Background->Dynamic[
             FEPrivate`If[
              FEPrivate`And[
               FEPrivate`SameQ[
                FEPrivate`Head[Typeset`newq$$], String], 
               FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
              RGBColor[1., 0.975, 0.95], 
              GrayLevel[1]]],
           BaselinePosition->Baseline,
           FrameStyle->GrayLevel[0.85],
           ImageSize->Automatic,
           RoundingRadius->5,
           StripOnInput->False],
          
          EventHandlerTag[{
           "MouseEntered" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, True], 
            "MouseExited" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, False], Method -> 
            "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
         DynamicModuleValues:>{}]},
       {
        InterpretationBox[
         StyleBox[
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEExpressions", "NecklaceAnimator"][20]],
          AnimatorBoxOptions->{ImageSize->20}],
         Animator[Appearance -> "Necklace", ImageSize -> 20],
         BaseStyle->{"Deploy"}]}
      },
      BaselinePosition->{1, 1},
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     "Column"]}, Dynamic[
     TrueQ[Typeset`open$$]],
    BaseStyle->{Deployed -> True},
    ImageSize->Automatic],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[22]:=",ExpressionUUID->"2a720f39-83df-4aa8-9bf8-bc01b2c9066f"],

Cell[BoxData[
 RowBox[{"16", " ", "\[Pi]"}]], "Output",
 CellChangeTimes->{3.801576841726536*^9},
 CellLabel->"Out[22]=",ExpressionUUID->"a734749a-1828-40df-b60f-18d0e3a32db8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"%", "/", "4"}]], "Input",
 CellChangeTimes->{{3.80157684698386*^9, 3.801576848787165*^9}},
 CellLabel->"In[23]:=",ExpressionUUID->"e39fdece-cafd-48ec-81f0-c3273b5a9476"],

Cell[BoxData[
 RowBox[{"4", " ", "\[Pi]"}]], "Output",
 CellChangeTimes->{3.801576849109996*^9},
 CellLabel->"Out[23]=",ExpressionUUID->"49c9bebf-1e1f-4f13-9b91-946412c39ff6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"0.5", "/", "2.5"}], "\[Equal]", " ", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"x", "-", "1.5"}], ")"}], " ", "/", "1000"}]}], ",", " ", "x"}],
   "]"}]], "Input",
 CellChangeTimes->{{3.8015769306448574`*^9, 3.8015770097230854`*^9}},
 CellLabel->"In[25]:=",ExpressionUUID->"4ef7b293-ff4f-477f-aaa5-d094e8a3293d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"x", "\[Rule]", "201.5`"}], "}"}], "}"}]], "Output",
 CellChangeTimes->{{3.801576986469535*^9, 3.8015770102800975`*^9}},
 CellLabel->"Out[25]=",ExpressionUUID->"ee6e4230-d945-4d3d-9124-ca7b1d1a69d6"]
}, Open  ]],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryParseResults",
  DynamicModuleBox[{Typeset`q$$ = "tan", Typeset`newq$$ = "tan", 
   Typeset`chosen$$ = "Tan[Placeholder[\"x\"]]", Typeset`open$$ = False}, 
   PaneSelectorBox[{False->
    DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
     WolframAlphaClient`Private`assumptionsQ$$ = True}, 
     TagBox[
      FrameBox[
       TagBox[GridBox[{
          {
           InputFieldBox[Dynamic[Typeset`newq$$], String,
            Appearance->None,
            BaseStyle->{"CalculateInput"},
            ContinuousAction->True,
            Enabled->True,
            FieldSize->{{1, 40}, {1, 
               DirectedInfinity[1]}},
            TrapSelection->False], 
           ButtonBox[
            TagBox[
             TooltipBox[
              StyleBox["\<\"\[RightGuillemet]\"\>",
               StripOnInput->False,
               LineColor->RGBColor[1, 0.5, 0],
               FrontFaceColor->RGBColor[1, 0.5, 0],
               BackFaceColor->RGBColor[1, 0.5, 0],
               GraphicsColor->RGBColor[1, 0.5, 0],
               FontColor->RGBColor[1, 0.5, 0]],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource[
                "WAStrings", "InterpretationAssumptions"], StandardForm]]],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource[
               "WAStrings", "InterpretationAssumptions"]], "Tooltip"]& ],
            Appearance->None,
            BaselinePosition->Baseline,
            ButtonFunction:>(Quiet[
               WolframAlpha[]]; Typeset`open$$ = True; 
             WolframAlphaClient`Private`extrudeFromFastParse["tan", 
               Defer[
                Tan[
                 Placeholder["x"]]], "Fast parse"]; Typeset`open$$ = False),
            ContentPadding->False,
            Evaluator->Automatic,
            Method->"Queued"], 
           ItemBox[
            ButtonBox[
             PaneSelectorBox[{True->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "OrangeSquarePlus"],
                 ImageSizeCache->{13., {4., 10.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ], False->
              TagBox[
               TooltipBox[
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "WABitmaps", "GraySquarePlus"],
                 ImageSizeCache->{13., {4., 10.}}],
                DynamicBox[
                 ToBoxes[
                  FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"], 
                  StandardForm]]],
               Annotation[#, 
                Dynamic[
                 FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"]], 
                "Tooltip"]& ]}, Dynamic[WolframAlphaClient`Private`show$$],
              ImageSize->All],
             Appearance->None,
             ButtonFunction:>(Quiet[
                WolframAlpha[]]; If[
                Or[
                 CurrentValue["OptionKey"], 
                 CurrentValue["AltKey"]], SelectionMove[
                  ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                  Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                   "TextForm"], All], Typeset`open$$ = True; 
                WolframAlphaClient`Private`extrudeFromFastParse["tan", 
                  Defer[
                   Tan[
                    Placeholder["x"]]], "Fast parse"]; 
                Typeset`open$$ = False]),
             Evaluator->Automatic,
             Method->"Queued"],
            Alignment->{Right, Top},
            StripOnInput->False]},
          {
           PaneBox[
            TagBox[
             TooltipBox[
              ButtonBox[
               PaneSelectorBox[{False->
                StyleBox[
                 RowBox[{"Tan", "[", 
                  TagBox[
                   FrameBox["\<\"x\"\>"],
                   "Placeholder"], "]"}],
                 StripOnInput->False,
                 NumberMarks->False], True->
                StyleBox[
                 RowBox[{"Tan", "[", 
                  TagBox[
                   FrameBox["\<\"x\"\>"],
                   "Placeholder"], "]"}],
                 StripOnInput->False,
                 ShowSyntaxStyles->False,
                 NumberMarks->False,
                 FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                 CurrentValue["MouseOver"]],
                BaseStyle->{ShowStringCharacters -> True},
                FrameMargins->0,
                ImageSize->Automatic],
               Alignment->Left,
               Appearance->None,
               BaseStyle->{},
               ButtonFunction:>(SelectionMove[
                  ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                  ButtonNotebook[], 
                  Cell[
                   BoxData[
                    RowBox[{"Tan", "[", 
                    TagBox[
                    FrameBox["\"x\""], "Placeholder"], "]"}]], "Input"], All]; 
                SelectionMove[
                  ButtonNotebook[], After, CellContents]),
               Evaluator->Automatic,
               ImageSize->Automatic,
               Method->"Preemptive"],
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                StandardForm]]],
             Annotation[#, 
              Dynamic[
               FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
              "Tooltip"]& ],
            AppearanceElements->{},
            BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
            ImageSize->{Automatic, {1, 100}},
            Scrollbars->{False, Automatic}], "\[SpanFromLeft]", 
           "\[SpanFromLeft]"}
         },
         AutoDelete->False,
         BaselinePosition->{1, 1},
         FrameStyle->GrayLevel[0.85],
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxDividers->{
          "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Grid"],
       Alignment->Top,
       Background->Dynamic[
         FEPrivate`If[
          FEPrivate`And[
           FEPrivate`SameQ[
            FEPrivate`Head[Typeset`newq$$], String], 
           FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
          RGBColor[1., 0.975, 0.95], 
          GrayLevel[1]]],
       BaselinePosition->Baseline,
       FrameStyle->GrayLevel[0.85],
       ImageSize->Automatic,
       RoundingRadius->5,
       StripOnInput->False],
      EventHandlerTag[{
       "MouseEntered" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, True], "MouseExited" :> 
        FEPrivate`Set[WolframAlphaClient`Private`show$$, False], Method -> 
        "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
     DynamicModuleValues:>{}], True->
    TagBox[GridBox[{
       {
        DynamicModuleBox[{WolframAlphaClient`Private`show$$ = False, 
         WolframAlphaClient`Private`assumptionsQ$$ = True}, 
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               InputFieldBox[Dynamic[Typeset`newq$$], String,
                Appearance->None,
                BaseStyle->{"CalculateInput"},
                ContinuousAction->True,
                Enabled->True,
                FieldSize->{{1, 40}, {1, 
                   DirectedInfinity[1]}},
                TrapSelection->False], 
               ButtonBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\"\[RightGuillemet]\"\>",
                   StripOnInput->False,
                   LineColor->RGBColor[1, 0.5, 0],
                   FrontFaceColor->RGBColor[1, 0.5, 0],
                   BackFaceColor->RGBColor[1, 0.5, 0],
                   GraphicsColor->RGBColor[1, 0.5, 0],
                   FontColor->RGBColor[1, 0.5, 0]],
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "InterpretationAssumptions"], StandardForm]]],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource[
                   "WAStrings", "InterpretationAssumptions"]], "Tooltip"]& ],
                Appearance->None,
                BaselinePosition->Baseline,
                ButtonFunction:>(Quiet[
                   WolframAlpha[]]; Typeset`open$$ = True; 
                 WolframAlphaClient`Private`extrudeFromFastParse["tan", 
                   Defer[
                    Tan[
                    Placeholder["x"]]], "Fast parse"]; Typeset`open$$ = False),
                ContentPadding->False,
                Evaluator->Automatic,
                Method->"Queued"], 
               ItemBox[
                ButtonBox[
                 PaneSelectorBox[{True->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "OrangeSquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ], False->
                  TagBox[
                   TooltipBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "WABitmaps", "GraySquarePlus"]],
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "ShowAllResults"],
                     StandardForm]]],
                   Annotation[#, 
                    Dynamic[
                    FEPrivate`FrontEndResource[
                    "WAStrings", "ShowAllResults"]], "Tooltip"]& ]}, Dynamic[
                  WolframAlphaClient`Private`show$$],
                  ImageSize->All],
                 Appearance->None,
                 ButtonFunction:>(Quiet[
                    WolframAlpha[]]; If[
                    Or[
                    CurrentValue["OptionKey"], 
                    CurrentValue["AltKey"]], SelectionMove[
                    ButtonNotebook[], All, ButtonCell, AutoScroll -> False]; 
                    NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    Typeset`newq$$, "WolframAlphaShort", FormatType -> 
                    "TextForm"], All], Typeset`open$$ = True; 
                    WolframAlphaClient`Private`extrudeFromFastParse["tan", 
                    Defer[
                    Tan[
                    Placeholder["x"]]], "Fast parse"]; 
                    Typeset`open$$ = False]),
                 Evaluator->Automatic,
                 Method->"Queued"],
                Alignment->{Right, Top},
                StripOnInput->False]},
              {
               PaneBox[
                TagBox[
                 TooltipBox[
                  ButtonBox[
                   PaneSelectorBox[{False->
                    StyleBox[
                    RowBox[{"Tan", "[", 
                    TagBox[
                    FrameBox["\<\"x\"\>"],
                    "Placeholder"], "]"}],
                    StripOnInput->False,
                    NumberMarks->False], True->
                    StyleBox[
                    RowBox[{"Tan", "[", 
                    TagBox[
                    FrameBox["\<\"x\"\>"],
                    "Placeholder"], "]"}],
                    StripOnInput->False,
                    ShowSyntaxStyles->False,
                    NumberMarks->False,
                    FontColor->RGBColor[1, 0.5, 0]]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    BaseStyle->{ShowStringCharacters -> True},
                    FrameMargins->0,
                    ImageSize->Automatic],
                   Alignment->Left,
                   Appearance->None,
                   BaseStyle->{},
                   ButtonFunction:>(SelectionMove[
                    ButtonNotebook[], All, ButtonCell]; NotebookWrite[
                    ButtonNotebook[], 
                    Cell[
                    BoxData[
                    RowBox[{"Tan", "[", 
                    TagBox[
                    FrameBox["\"x\""], "Placeholder"], "]"}]], "Input"], All]; 
                    SelectionMove[
                    ButtonNotebook[], After, CellContents]),
                   Evaluator->Automatic,
                   ImageSize->Automatic,
                   Method->"Preemptive"],
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource["WAStrings", "RemoveResults"], 
                    StandardForm]]],
                 Annotation[#, 
                  Dynamic[
                   FEPrivate`FrontEndResource["WAStrings", "RemoveResults"]], 
                  "Tooltip"]& ],
                AppearanceElements->{},
                BaseStyle->{ShowStringCharacters -> True, ScriptLevel -> 0},
                ImageSize->{Automatic, {1, 100}},
                Scrollbars->{False, Automatic}], "\[SpanFromLeft]", 
               "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             BaselinePosition->{1, 1},
             FrameStyle->GrayLevel[0.85],
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxDividers->{
              "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"],
           Alignment->Top,
           Background->Dynamic[
             FEPrivate`If[
              FEPrivate`And[
               FEPrivate`SameQ[
                FEPrivate`Head[Typeset`newq$$], String], 
               FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
              RGBColor[1., 0.975, 0.95], 
              GrayLevel[1]]],
           BaselinePosition->Baseline,
           FrameStyle->GrayLevel[0.85],
           ImageSize->Automatic,
           RoundingRadius->5,
           StripOnInput->False],
          
          EventHandlerTag[{
           "MouseEntered" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, True], 
            "MouseExited" :> 
            FEPrivate`Set[WolframAlphaClient`Private`show$$, False], Method -> 
            "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]],
         DynamicModuleValues:>{}]},
       {
        InterpretationBox[
         StyleBox[
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEExpressions", "NecklaceAnimator"][20]],
          AnimatorBoxOptions->{ImageSize->20}],
         Animator[Appearance -> "Necklace", ImageSize -> 20],
         BaseStyle->{"Deploy"}]}
      },
      BaselinePosition->{1, 1},
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     "Column"]}, Dynamic[
     TrueQ[Typeset`open$$]],
    BaseStyle->{Deployed -> True},
    ImageSize->Automatic],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[26]:=",ExpressionUUID->"5294a13c-10a0-494f-aba6-98b2a35e11e7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     SuperscriptBox["a", "2"], "+", 
     SuperscriptBox["3", "2"]}], "\[Equal]", 
    SuperscriptBox["5", "2"]}], ",", "a"}], "]"}]], "Input",
 CellChangeTimes->{{3.801577156697975*^9, 3.8015772032508545`*^9}},
 CellLabel->"In[28]:=",ExpressionUUID->"1748e564-b155-4a8a-87ac-1dbaf0e9e8aa"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a", "\[Rule]", 
     RowBox[{"-", "4"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", "\[Rule]", "4"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.8015771874012604`*^9, 3.8015772037362623`*^9}},
 CellLabel->"Out[28]=",ExpressionUUID->"70cdd8b6-2ddd-49a2-aebb-7a8b1aebe2e5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"4", "/", "3"}]], "Input",
 CellChangeTimes->{{3.8015772100894613`*^9, 3.80157722783568*^9}},
 CellLabel->"In[29]:=",ExpressionUUID->"75ea28cd-26c8-4572-ab93-cfd130ecdd82"],

Cell[BoxData[
 FractionBox["4", "3"]], "Output",
 CellChangeTimes->{3.801577236463217*^9},
 CellLabel->"Out[29]=",ExpressionUUID->"671780b0-3ceb-4251-aacd-436c19e95876"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "[", 
  FractionBox["4", "3"], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->"In[30]:=",ExpressionUUID->"9c3a550f-44b0-4a57-b373-e352c041cde7"],

Cell[BoxData["1.3333333333333333`"], "Output",
 CellChangeTimes->{3.801577238710202*^9},
 CellLabel->"Out[30]=",ExpressionUUID->"e903954b-b279-4a7e-bb7f-415f66d12fbc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"2", "*", "Pi", "*", "400"}]], "Input",
 CellChangeTimes->{{3.80157730386318*^9, 3.80157731099467*^9}},
 CellLabel->"In[31]:=",ExpressionUUID->"d2ba002d-0fb1-47c2-8838-9ccf8a02a458"],

Cell[BoxData[
 RowBox[{"800", " ", "\[Pi]"}]], "Output",
 CellChangeTimes->{3.8015773112300353`*^9},
 CellLabel->"Out[31]=",ExpressionUUID->"9314d341-6c09-49ff-80b8-94075537bad7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"(", 
    RowBox[{"Pi", "*", "400"}], ")"}], "/", "180"}], "*", 
  RowBox[{"(", 
   RowBox[{"360", "/", "3"}], ")"}]}]], "Input",
 CellChangeTimes->{{3.8015773668841534`*^9, 3.8015774293629313`*^9}},
 CellLabel->"In[33]:=",ExpressionUUID->"07c388d0-3319-4e95-92b3-cde85c43c996"],

Cell[BoxData[
 FractionBox[
  RowBox[{"800", " ", "\[Pi]"}], "3"]], "Output",
 CellChangeTimes->{{3.8015774114222054`*^9, 3.8015774299035025`*^9}},
 CellLabel->"Out[33]=",ExpressionUUID->"57694e7c-7a17-43d0-9afe-2e89ce327597"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Circle", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0", ",", "0"}], "}"}], ",", "400"}], "]"}], " ", "\[Equal]", 
    " ", 
    RowBox[{
     RowBox[{"Tan", "[", "45", "]"}], "*", "x"}]}], ",", " ", "x"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.801577483412218*^9, 3.801577520627591*^9}, {
  3.801577565578458*^9, 3.8015775705403004`*^9}, {3.8015776134473047`*^9, 
  3.801577629957409*^9}, {3.801577680915064*^9, 3.801577714346769*^9}, {
  3.8015777448729134`*^9, 3.801577745920433*^9}, {3.8015778582912273`*^9, 
  3.80157785835458*^9}},
 CellLabel->"In[43]:=",ExpressionUUID->"f8c419af-effc-47fc-8878-c3c7ca27b29c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"x", "\[Rule]", 
    RowBox[{
     RowBox[{"Circle", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "0"}], "}"}], ",", "400"}], "]"}], " ", 
     RowBox[{"Cot", "[", "45", "]"}]}]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{3.801577764987793*^9, 3.8015778596505556`*^9},
 CellLabel->"Out[43]=",ExpressionUUID->"5b451770-a98d-45a9-a2da-7f2635c0c9d8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"First", "[", 
  RowBox[{"Solve", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Circle", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "0"}], "}"}], ",", "400"}], "]"}], " ", "\[Equal]", 
     " ", 
     RowBox[{
      RowBox[{"Tan", "[", "45", "]"}], "*", "x"}]}], ",", " ", "x"}], "]"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.8015784860026903`*^9, 3.801578490096346*^9}},
 NumberMarks->False,
 CellLabel->"In[45]:=",ExpressionUUID->"97278927-beb9-47f0-b295-15bbd5cae344"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"x", "\[Rule]", 
   RowBox[{
    RowBox[{"Circle", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0", ",", "0"}], "}"}], ",", "400"}], "]"}], " ", 
    RowBox[{"Cot", "[", "45", "]"}]}]}], "}"}]], "Output",
 CellChangeTimes->{3.801577877841196*^9},
 CellLabel->"Out[45]=",ExpressionUUID->"c389bd4d-69f1-4452-b94c-9a9bd2e3aee4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "[", "%", "]"}]], "Input",
 CellChangeTimes->{{3.8015778864596806`*^9, 3.801577891255636*^9}},
 CellLabel->"In[46]:=",ExpressionUUID->"eddf3dca-ddfc-466a-8d5d-f1cadc153ca9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"x", "\[Rule]", 
   RowBox[{"0.6173696237835551`", " ", 
    RowBox[{"Circle", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0.`", ",", "0.`"}], "}"}], ",", "400.`"}], "]"}]}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.8015778919186497`*^9},
 CellLabel->"Out[46]=",ExpressionUUID->"24c25d1a-9696-4d48-8805-6c1e8a5c3d89"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "intersection tan(45)*x=y and x^2+y^2=400^2", Typeset`opts$$ = {
   AppearanceElements -> {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {"ResultOverTheReals", "Results", 1, 2, "Content"}, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "Input", "numsubpods" -> "1", 
     "position" -> "100", "scanner" -> "Identity", "title" -> 
     "Input interpretation"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"intersections\"", {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    StyleBox[
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    
                    TemplateBox[{"45"}, "TanDegree", 
                    DisplayFunction -> (RowBox[{"tan", "(", 
                    RowBox[{#, "\[InvisibleSpace]", "\[Degree]"}], ")"}]& )], 
                    " ", "x"}], "\[LongEqual]", "y"}], 
                    StyleBox[
                    RowBox[{"\[NoBreak]", 
                    PaneBox[
                    "\"  |  \"", BaselinePosition -> Baseline, BaseStyle -> 
                    GrayLevel[0.6]]}], AutoSpacing -> True], 
                    RowBox[{
                    RowBox[{
                    SuperscriptBox["x", "2"], "+", 
                    SuperscriptBox["y", "2"]}], "\[LongEqual]", 
                    TagBox[
                    SuperscriptBox["400", "2"], Identity]}]}], 
                    LinebreakAdjustments -> {1, 10, 0, 0, 100}, LineIndent -> 
                    0]}}, GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    $CellContext`TagBoxWrapper["Separator" -> " "]], 
                   LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                  BaselinePosition -> Center]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               ColumnsEqual -> False, RowsEqual -> False, 
               GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
               AllowScriptLevelChange -> False], 
              $CellContext`TagBoxWrapper["Separator" -> " "]], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "ResultOverTheReals", "numsubpods" -> 
     "2", "position" -> "200", "primary" -> "true", "scanner" -> "Solve", 
     "title" -> "Results"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             FormBox[
              TagBox[
               GridBox[{{
                  PaneBox[
                   RowBox[{
                    RowBox[{"x", "\[LongEqual]", 
                    TagBox[
                    RowBox[{
                    RowBox[{"-", "200"}], " ", 
                    SqrtBox["2"]}], Identity]}], "\[And]", 
                    RowBox[{"y", "\[LongEqual]", 
                    TagBox[
                    RowBox[{
                    RowBox[{"-", "200"}], " ", 
                    SqrtBox["2"]}], Identity]}]}], BaselinePosition -> 
                   Baseline, ImageSize -> 550]}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column",
                 GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Column"], TraditionalForm], TraditionalForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             FormBox[
              TagBox[
               GridBox[{{
                  PaneBox[
                   RowBox[{
                    RowBox[{"x", "\[LongEqual]", 
                    TagBox[
                    RowBox[{"200", " ", 
                    SqrtBox["2"]}], Identity]}], "\[And]", 
                    RowBox[{"y", "\[LongEqual]", 
                    TagBox[
                    RowBox[{"200", " ", 
                    SqrtBox["2"]}], Identity]}]}], BaselinePosition -> 
                   Baseline, ImageSize -> 550]}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column",
                 GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Column"], TraditionalForm], TraditionalForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Approximate forms", "input" -> 
         "ResultOverTheReals__Approximate forms"}, {}]}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement[
       "info", {
        "text" -> "e_1 \[And] e_2 \[And] ... is the logical AND function"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/And.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/AND.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}]}]}], Typeset`pod3$$ = 
   XMLElement[
   "pod", {"title" -> "Implicit plot", "scanner" -> "Solve", "id" -> 
     "PlotOfSolutionSet", "position" -> "300", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "ContourPlot[{x == y, x^2 + y^2 == 160000}, {x, -500., 500.}, {y, \
-500., 500.}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              TagBox[
               FormBox[
                StyleBox[
                 
                 DynamicModuleBox[{
                  CalculateUtilities`GraphicsUtilities`Private`max1549$$ = 
                   0.5, CalculateUtilities`GraphicsUtilities`Private`max1551$$\
 = 0.5, CalculateUtilities`GraphicsUtilities`Private`min1548$$ = -0.5, 
                   CalculateUtilities`GraphicsUtilities`Private`min1550$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                   Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                   Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                   Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                   Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min1548$$], \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["x", TraditionalForm]], "min"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max1549$$], 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["x", TraditionalForm]], "max"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min1550$$], \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["y", TraditionalForm]], "min"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max1551$$], 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["y", TraditionalForm]], "max"]}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}, {
                    Manipulate`Place[3], 
                    Manipulate`Place[4]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                   Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = 
                   False, Typeset`skipInitDone$$ = False, 
                   CalculateUtilities`GraphicsUtilities`Private`more$1498648$$\
 = False, CalculateUtilities`GraphicsUtilities`Private`min1548$1498653$$ = 0, 
                   CalculateUtilities`GraphicsUtilities`Private`max1549$\
1498654$$ = 0, CalculateUtilities`GraphicsUtilities`Private`min1550$1498655$$ = 
                   0, CalculateUtilities`GraphicsUtilities`Private`max1551$\
1498656$$ = 0}, 
                  DynamicBox[
                   Manipulate`ManipulateBoxes[
                   2, TraditionalForm, 
                    "Variables" :> {
                    CalculateUtilities`GraphicsUtilities`Private`max1549$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`max1551$\
$ = 0.5, CalculateUtilities`GraphicsUtilities`Private`min1548$$ = -0.5, 
                    CalculateUtilities`GraphicsUtilities`Private`min1550$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                    "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$1498648$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min1548$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min1548$\
1498653$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max1549$$, 
                    
                    CalculateUtilities`GraphicsUtilities`Private`max1549$\
1498654$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min1550$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min1550$\
1498655$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max1551$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max1551$\
1498656$$, 0]}, "OtherVariables" :> {
                    Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    
                    ContourPlot[{$CellContext`x == $CellContext`y, \
$CellContext`x^2 + $CellContext`y^2 == 160000}, {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min1548$$], 
                    (
                    Piecewise[{{
                    0. + 534.5224838248487 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    534.5224838248487 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min1548$$], \
-500.], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min1548$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max1549$$]], 
                    (
                    Piecewise[{{
                    0. + 534.5224838248487 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 534.5224838248487 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min1548$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max1549$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min1548$$ + 
                    1., CalculateUtilities`GraphicsUtilities`Private`max1549$$\
]], 500.]}, {$CellContext`y, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min1550$$], 
                    (Piecewise[{{
                    0. + 534.5224838248487 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    534.5224838248487 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min1550$$], \
-500.], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min1550$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max1551$$]], 
                    (
                    Piecewise[{{
                    0. + 534.5224838248487 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 534.5224838248487 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min1550$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max1551$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min1550$$ + 
                    1., CalculateUtilities`GraphicsUtilities`Private`max1551$$\
]], 500.]}, ImageSize -> {330.}, PlotPoints -> 30, ContourStyle -> {{
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]]}, {
                    Directive[
                    RGBColor[0.6, 0.24, 0.4428931686004542], 
                    AbsoluteThickness[1]]}, {
                    Directive[
                    RGBColor[0.6, 0.5470136627990908, 0.24], 
                    AbsoluteThickness[1]]}, {
                    Directive[
                    RGBColor[0.24, 0.6, 0.33692049419863584`], 
                    AbsoluteThickness[1]]}, {
                    Directive[
                    RGBColor[0.24, 0.5939180232054561, 0.6], 
                    AbsoluteThickness[1]]}}, AspectRatio -> 1., 
                    Exclusions -> {Automatic}, Epilog -> {
                    AbsolutePointSize[5], 
                    Hue[0], {
                    Tooltip[
                    Point[{-282.842712474619, -282.842712474619}], 
                    Row[{"(", -282.842712474619, ",", -282.842712474619, 
                    ")"}]], 
                    Tooltip[
                    Point[{282.842712474619, 282.842712474619}], 
                    
                    Row[{"(", 282.842712474619, ",", 282.842712474619, 
                    ")"}]]}}, FrameLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}]], 
                    "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min1548$$, \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["x", TraditionalForm]], "min"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max1549$$, 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["x", TraditionalForm]], "max"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 2}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min1550$$, \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["y", TraditionalForm]], "min"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 3}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max1551$$, 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["y", TraditionalForm]], "max"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 4}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}, {
                    Manipulate`Place[3], 
                    Manipulate`Place[4]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                    "Options" :> {
                    ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                    "DefaultOptions" :> {}], SingleEvaluation -> True], 
                  Initialization :> ({None, 
                    ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbinv7/\
APkPiMNDZN8AEJ6GBMGlCS8r232GksXDvYzjb48+Czm6RZu0oxHaAp/XCqL83ju+eeu96TIxml/\
V6vp69a80Fykt7A02NrhnKWy0KQd6e5olozKdIr+Oy2NTE1e5TDD0q877o176WagfHnV/g+\
8KTgYOhXwzgzjOrJvoI8Y4muPSPFju1PJlwmwNlP+nRr5+\
WL3e1dD4OxjMAYqoTebguZZwo0TXsIdM2atxzEN398VB4/FZzH9HtBRUL1A+sdKyAWRgrgmE/\
wrZebqbuYmAFBQJELp8nJc9j2Am0UE9MxneX4xvlkbbUFBjXVnpt7JTfrFOTDv4kPZOxi8h6XtDs7A\
sPCuGT0nZXVP+dugOfXbeGVPFlNHOb3hiNvYNgx1ct0PmtdJ89I1bUu+jlXFzVfNhrk+VOm/\
l86ZNosh/G8bRh0dmRrvFp7y/A7beFljl0/F/\
d9az57Rwm4ajhUgvsoScHnUTRTHniJtk9X59bhMe5UfMfoDKlghRPZOMt+\
cf3xsAKvN4UYazfZgHREPQMimlPrIo7bPTZlZpiBgsQCz6/\
rl002lnUoAXe2rz0ThNkB5glZtzyhOUgX6g4myb78UXEruZxpMuT9QBg6pWqt6G9hfZQlV5CxDIwkx\
guaeg3msEpqBCpY9oMSJM5BMIRkv+zHffMPFyuBVO0rVJfyLA5caU7Dk+\
iXBT6kYmqy5o4dOLqC2xazieRJrbqIpenitNkc0/\
0m040bmgM9lITQkoQP9G5T6DaFv7opLO3B3ZrQrQndmtCtCd2a8P+uCS5i/Ff6DadPuMY="]]}; 
                   Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                  Deinitialization :> None, 
                  UntrackedVariables :> {Typeset`size$$}, 
                  SynchronousInitialization -> True, 
                  UnsavedVariables :> {Typeset`initDone$$}, 
                  UndoTrackedVariables :> {
                   Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
                 Deployed -> True, StripOnInput -> False], TraditionalForm], 
               Manipulate`InterpretManipulate[1]], 
              TagBox[
               GridBox[{{
                  GraphicsBox[{
                    RGBColor[0.24720000000000014`, 0.24, 0.6], {
                    AbsoluteThickness[2], 
                    LineBox[{{0, 0}, {1, 0}}]}}, ImageSize -> NCache[
                    Rational[143, 10], 14.3], 
                   BaselinePosition -> (Center -> Center)], 
                  StyleBox[
                   RowBox[{"x", "\[LongEqual]", "y"}], {
                   FontFamily -> "Verdana", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                  GraphicsBox[{
                    RGBColor[0.6, 0.24, 0.4428931686004542], {
                    AbsoluteThickness[2], 
                    LineBox[{{0, 0}, {1, 0}}]}}, ImageSize -> NCache[
                    Rational[143, 10], 14.3], 
                   BaselinePosition -> (Center -> Center)], 
                  StyleBox[
                   RowBox[{
                    RowBox[{
                    SuperscriptBox["x", "2"], "+", 
                    SuperscriptBox["y", "2"]}], "\[LongEqual]", "160000"}], {
                   FontFamily -> "Verdana", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                AutoDelete -> False, 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {"Columns" -> {{0.3}}, "Rows" -> {{0.3}}}],
                "Grid"]}, "Labeled", DisplayFunction -> (FormBox[
               GridBox[{{
                  TagBox[
                   ItemBox[
                    PaneBox[
                    TagBox[#, "SkipImageSizeLevel"], 
                    Alignment -> {Center, Baseline}, BaselinePosition -> 
                    Baseline], DefaultBaseStyle -> "Labeled"], 
                   "SkipImageSizeLevel"], 
                  
                  ItemBox[#2, Alignment -> {Inherited, Bottom}, 
                   DefaultBaseStyle -> "LabeledLabel"]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                BaselinePosition -> {1, 1}], TraditionalForm]& ), 
             InterpretationFunction -> (RowBox[{
                StyleBox[
                "Labeled", FontFamily -> "Bitstream Vera Sans", 
                 FontSize -> -1 + Inherited], "[", 
                RowBox[{#, ",", #2, ",", 
                  RowBox[{"(", "\[NoBreak]", 
                    GridBox[{{
                    StyleBox[
                    "Right", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], 
                    StyleBox[
                    "Bottom", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited]}}, RowSpacings -> 1, 
                    ColumnSpacings -> 1, RowAlignments -> Baseline, 
                    ColumnAlignments -> Center], "\[NoBreak]", ")"}]}], 
                "]"}]& )], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext,minput"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "ContourPlot"}, {}], "\n "}]}],
    Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {True, False, {False}, True},
    Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement["assumptions", {"count" -> "2"}, {
      XMLElement[
      "assumption", {
       "type" -> "Clash", "word" -> "intersection", "template" -> 
        "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", "count" -> 
        "2"}, {
        XMLElement[
        "value", {
         "name" -> "SolveWord", "desc" -> " referring to equation solving", 
          "input" -> "*C.intersection-_*SolveWord-"}, {}], 
        XMLElement[
        "value", {
         "name" -> "PlotAnalysisWord", "desc" -> 
          " referring to plot analysis", "input" -> 
          "*C.intersection-_*PlotAnalysisWord-"}, {}]}], 
      XMLElement[
      "assumption", {
       "type" -> "AngleUnit", "template" -> 
        "Assuming trigonometric arguments in ${desc1}. Use ${desc2} instead", 
        "count" -> "2"}, {
        XMLElement[
        "value", {
         "name" -> "D", "desc" -> "degrees", "input" -> "TrigRD_D"}, {}], 
        XMLElement[
        "value", {
         "name" -> "R", "desc" -> "radians", "input" -> "TrigRD_R"}, {}]}]}]},
    Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True], 
   Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "3", "datatypes" -> 
    "Solve", "timedout" -> "", "timedoutpods" -> "", "timing" -> "1.566", 
    "parsetiming" -> "0.916", "parsetimedout" -> "false", "recalculate" -> "",
     "id" -> "MSP22961c46g43fa45ah7e500000d50b12507gfigd4", "host" -> 
    "https://www4f.wolframalpha.com", "server" -> "28", "related" -> 
    "https://www4f.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa22971c46g43fa45ah7e5000013b44dd2e6ce23387931354083698071672", "version" -> 
    "2.6"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 2., 
    "Date" -> {2020, 6, 19, 19, 56, 13.4439812`8.88110285018457}, "Line" -> 
    52, "SessionID" -> 23180306378915507075}, Typeset`showpods$$ = {1, 2, 3}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "ResultOverTheReals", "Results", 1, 2, "Content"}, Typeset`open$$ = False, 
   Typeset`newq$$ = "intersection tan(45)*x=y and x^2+y^2=400^2"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$}, Typeset`chosen$$, 
        Typeset`open$$, Typeset`elements$$, Typeset`q$$, Typeset`opts$$, 
        Typeset`nonpods$$, Typeset`queryinfo$$, Typeset`sessioninfo$$, 
        Typeset`showpods$$, Typeset`failedpods$$, Typeset`newq$$}]], 
     StandardForm],
    ImageSizeCache->{379., {31., 21.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}], 
       Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[52]:=",ExpressionUUID->"86d9be6b-d0e5-4b7f-8252-5f17fc00a00a"],

Cell[BoxData[
 InterpretationBox[
  FrameBox[
   StyleBox[
    FormBox[
     FormBox[
      FormBox[
       StyleBox[GridBox[{
          {
           PaneBox[
            RowBox[{
             RowBox[{"x", "\[LongEqual]", 
              RowBox[{
               RowBox[{"-", "200"}], " ", 
               SqrtBox["2"]}]}], "\[And]", 
             RowBox[{"y", "\[LongEqual]", 
              RowBox[{
               RowBox[{"-", "200"}], " ", 
               SqrtBox["2"]}]}]}],
            BaselinePosition->Baseline,
            ImageSize->550]}
         },
         AllowScriptLevelChange->False,
         DefaultBaseStyle->"Column",
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"],
       TraditionalForm],
      TraditionalForm],
     TraditionalForm], "Output",
    CellSize->{550, Automatic},
    AutoStyleOptions->{"HighlightFormattingErrors"->False},
    ScriptLevel->0,
    NumberPoint->".",
    RenderingOptions->{"3DRenderingMethod"->"BSPTreeOrDepthBuffer"},
    FontFamily->"Times",
    FontSize->14,
    Background->None,
    GraphicsBoxOptions->{DefaultAxesStyle->Directive[
      GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 1, 
      "GraphicsAxes"],
    DefaultBaseStyle->{FontFamily -> "Times", "Graphics"},
    DefaultFrameStyle->Directive[
      GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 1, 
      "GraphicsFrame"],
    DefaultFrameTicksStyle->Directive[
     FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"],
    DefaultTicksStyle->Directive[
     FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]},
    Graphics3DBoxOptions->{
    DefaultBaseStyle->{FontFamily -> "Times", "Graphics3D"}}],
   BaseStyle->{Plain},
   FrameMargins->10,
   FrameStyle->GrayLevel[0.85],
   RoundingRadius->5,
   StripOnInput->False],
  WolframAlphaResult[
  "intersection tan(45)*x=y and x^2+y^2=400^2", {{"ResultOverTheReals", 1}, 
    "Content"}]]], "Output",
 CellChangeTimes->{3.801578175617446*^9},
 CellLabel->"Out[52]=",ExpressionUUID->"f4f9e8b5-de57-4a39-a854-76af2400eaa4"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.8015781224811926`*^9, 3.8015781325419645`*^9}, 
   3.8015782067192364`*^9},ExpressionUUID->"fa4ea15e-d332-4b94-87f2-\
985572cf7836"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryNoResults",
  DynamicModuleBox[{Typeset`q$$ = "minimum x of sin(2x)=1/2", Typeset`newq$$ =
    "minimum x of sin(2x)=1/2"}, 
   FrameBox[
    TagBox[GridBox[{
       {
        InputFieldBox[Dynamic[Typeset`newq$$], String,
         Appearance->None,
         BaseStyle->{"CalculateInput"},
         ContinuousAction->True,
         Enabled->True,
         FieldSize->{{1, 40}, {1, 
            DirectedInfinity[1]}},
         TrapSelection->False], "\[SpanFromLeft]"},
       {
        StyleBox[
         TemplateBox[{"\"(\"", 
           DynamicBox[
            ToBoxes[
             FEPrivate`FrontEndResource["WAStrings", "NoInterpretations"], 
             StandardForm]], "\")\""},
          "RowDefault"], "DialogStyle",
         StripOnInput->False,
         FontColor->GrayLevel[0.5]], 
        TagBox[
         TooltipBox[
          ButtonBox[
           
           DynamicBox[FEPrivate`FrontEndResource[
            "WABitmaps", "QuestionMarkSmallIcon"],
            ImageSizeCache->{16., {6., 10.}}],
           Appearance->None,
           BaseStyle->{ShowStringCharacters -> False},
           ButtonFunction:>(Quiet[
              WolframAlpha[]]; 
            WolframAlphaClient`Private`openSuggestionsDialog[
             "NoResults", "minimum x of sin(2x)=1/2"]),
           Evaluator->Automatic,
           Method->"Preemptive"],
          "\"Information, tips and feedback\"",
          TooltipStyle->"TextStyling"],
         Annotation[#, "Information, tips and feedback", "Tooltip"]& ]}
      },
      AutoDelete->False,
      BaselinePosition->{1, 1},
      FrameStyle->GrayLevel[0.85],
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxDividers->{
       "Columns" -> {{False}}, "Rows" -> {False, {True}, False}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     "Grid"],
    Alignment->Top,
    Background->Dynamic[
      FEPrivate`If[
       FEPrivate`And[
        FEPrivate`SameQ[
         FEPrivate`Head[Typeset`newq$$], String], 
        FEPrivate`UnsameQ[Typeset`q$$, Typeset`newq$$]], 
       RGBColor[1., 0.975, 0.95], 
       GrayLevel[1]]],
    BaselinePosition->Baseline,
    FrameStyle->GrayLevel[0.85],
    ImageSize->Automatic,
    RoundingRadius->5,
    StripOnInput->False],
   DynamicModuleValues:>{}],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[54]:=",ExpressionUUID->"04d00477-d951-44fc-8db0-81ea7522f440"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FindMinimum", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Sin", "[", 
     RowBox[{"2", "x"}], "]"}], "\[Equal]", 
    RowBox[{"1", "/", "2"}]}], ",", "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.801578334423601*^9, 3.8015783575270953`*^9}},
 CellLabel->"In[55]:=",ExpressionUUID->"5eea84a2-9950-424c-9bcb-d0aafcdabe34"],

Cell[BoxData[
 TemplateBox[{
  "FindMinimum", "nrnum", 
   "\"The function value \\!\\(\\*RowBox[{\\\"False\\\"}]\\) is not a real \
number at \\!\\(\\*RowBox[{\\\"{\\\", \\\"x\\\", \\\"}\\\"}]\\) = \
\\!\\(\\*RowBox[{\\\"{\\\", \\\"1.`\\\", \\\"}\\\"}]\\).\"", 2, 55, 5, 
   23180306378915507075, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.8015783580982294`*^9},
 CellLabel->
  "During evaluation of \
In[55]:=",ExpressionUUID->"0b2fda87-a612-43f1-8a1b-ccc2c1f0d2fa"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FindMinimum", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Sin", "[", 
     RowBox[{"2", " ", "x"}], "]"}], "=", 
    FractionBox["1", "2"]}], ",", "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.8015783712064285`*^9, 3.8015783724071393`*^9}},
 CellLabel->"In[56]:=",ExpressionUUID->"4188b152-cd19-405a-9703-f20f0983e982"],

Cell[BoxData[
 TemplateBox[{
  "Set", "write", 
   "\"Tag \\!\\(\\*RowBox[{\\\"Sin\\\"}]\\) in \\!\\(\\*RowBox[{\\\"Sin\\\", \
\\\"[\\\", RowBox[{\\\"2\\\", \\\" \\\", \\\"x\\\"}], \\\"]\\\"}]\\) is \
Protected.\"", 2, 56, 10, 23180306378915507075, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.8015783729993076`*^9},
 CellLabel->
  "During evaluation of \
In[56]:=",ExpressionUUID->"f5b0e655-fd7f-4c6f-94bb-a0fd6f63010c"],

Cell[BoxData[
 TemplateBox[{
  "FindMinimum", "fmgz", 
   "\"Encountered a gradient that is effectively zero. The result returned \
may not be a minimum; it may be a maximum or a saddle point.\"", 2, 56, 11, 
   23180306378915507075, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.801578373011303*^9},
 CellLabel->
  "During evaluation of \
In[56]:=",ExpressionUUID->"80f92f94-1f29-4c92-8e92-809c05c16e7c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.5`", ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "1.`"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.801578373018367*^9},
 CellLabel->"Out[56]=",ExpressionUUID->"b850697f-66d0-4441-b61b-b1ddfd02545f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ArcTan", "[", 
  RowBox[{"1", "/", "2"}], "]"}]], "Input",
 CellChangeTimes->{{3.801578442882987*^9, 3.8015784441627846`*^9}},
 CellLabel->"In[57]:=",ExpressionUUID->"53906930-4d31-4958-806a-54416612b861"],

Cell[BoxData[
 RowBox[{"ArcTan", "[", 
  FractionBox["1", "2"], "]"}]], "Output",
 CellChangeTimes->{3.8015784451191287`*^9},
 CellLabel->"Out[57]=",ExpressionUUID->"92777595-7376-491c-a1d4-fed15d52a536"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"1", "/", "2"}], "x"}], "=", "y"}], "\[IndentingNewLine]", 
  "]"}]], "Input",
 CellChangeTimes->{{3.8015785373491774`*^9, 3.8015785927406044`*^9}},
 CellLabel->"In[59]:=",ExpressionUUID->"67b995d7-0df6-499b-a293-a346d63e306f"],

Cell[BoxData[
 TemplateBox[{
  "Plot", "argr", 
   "\"\\!\\(\\*RowBox[{\\\"Plot\\\"}]\\) called with 1 argument; \
\\!\\(\\*RowBox[{\\\"2\\\"}]\\) arguments are expected.\"", 2, 59, 13, 
   23180306378915507075, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.8015785931032343`*^9},
 CellLabel->
  "During evaluation of \
In[59]:=",ExpressionUUID->"099ad4aa-c9e0-4cfa-94fa-c04229388b0b"],

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   FractionBox["x", "2"], "=", "y"}], "]"}]], "Output",
 CellChangeTimes->{3.801578593112291*^9},
 CellLabel->"Out[59]=",ExpressionUUID->"199dbe08-7f40-4e78-a16e-bf054e88c48e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"1", "/", "2"}], "x"}], "=", "y"}], ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", "0", ",", "20"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8015785973641815`*^9, 3.8015786275616193`*^9}},
 CellLabel->"In[61]:=",ExpressionUUID->"59237455-c95a-41b1-9b25-a7c60eca60e8"],

Cell[BoxData[
 TemplateBox[{
  "Set", "write", 
   "\"Tag \\!\\(\\*RowBox[{\\\"Times\\\"}]\\) in \\!\\(\\*FractionBox[\\\"x\\\
\", \\\"2\\\"]\\) is Protected.\"", 2, 61, 18, 23180306378915507075, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{{3.801578619372862*^9, 3.801578628025977*^9}},
 CellLabel->
  "During evaluation of \
In[61]:=",ExpressionUUID->"e6f7c893-5161-498a-8f77-024171b5593d"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1:eJxFxWlIkwEYAODZ1GBOcEmimds3W07nvIogI480yPIg0yVMOjZ1k7xSHJha
mWk6QlslnowxTUPEmTEDO5apaV4LXVmxReIc0lLI1tCptOqH7/vj4WEKC85l
7SKRSIn//F9+Q+gcltkWufOojkhII65F7Wwf09wmCCksH6pjOBEtcG6EJG+d
0Q3rtrIbfjIG4d36RfYqYwJWTioKfzC+wKo+qT432AyLo2ZbVooscL4pwKhW
2WAKs4r97Sgpeud6tymO8jIZFupTX5OnneHCt1XCAjYF7r9KTfE87Qory3LM
oWlucKViO/n3Cg0m6RaiX5a6w37FopJUzl54ydp03uWVB3zGdOX6g0JPOGlJ
Fkin74PNI8KKd73ecDBt3if2kg9MibIKDBY6fGqVv+7LI+DPw5kOfC4THqgd
vUhYcZGTZEGr9YUzisoGqK0H4BBxoDZBwILf7+G6SMIPwi9UlW1csh9c5sA5
O/0VpxhK4/LVbNjUxWxQlPvDDf5ejoO8AFjWKhoXEByY33BBS13GN0522hSa
QNhoiikZruHC7RFh3jOCILi3WkITBwXDNbyMeLIVP2JQdtfMhMDNAW29M/Gh
8M2huub4QTzRm9c5yQqDT+SPp9OkuGK/kDVtxVkjjxuT0g/BsqBhzpwGF1kc
Zyc4h2Fh/y9Ceg/PrUzZPnMfl6SoP1Ef4rVWSb2sEVeF27aa5LjtjX2+qweX
zVHrRsfx1o687DsTeEexNjZuCn/mIduc0uIGvnu27iPONnrFLhrxUHUp/ZEJ
P1att2Ut4wls+ZPvZrwoh6CvreHlx2/ZnlrwatfFD8VWvLmv4+7GBt5e4Sh+
von3JGfFlG/jat8xn8g/uMbiZ7Pb8b9nFSpz
       "]]},
     Annotation[#, "Charting`Private`Tag$45469#1"]& ]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0, 20}, {0., 19.999999591836733`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.8015786194331007`*^9, 3.8015786280359726`*^9}},
 CellLabel->"Out[61]=",ExpressionUUID->"89a59b32-7889-4613-a35b-e9e7f9797e10"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Tan", "[", "%", "]"}]], "Input",
 CellChangeTimes->{{3.801578637817034*^9, 3.8015786601296377`*^9}},
 CellLabel->"In[62]:=",ExpressionUUID->"d963d9ec-7a74-461c-887d-f873ff20c57e"],

Cell[BoxData[
 RowBox[{"Tan", "[", 
  GraphicsBox[{{{}, {}, 
     TagBox[
      {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], 
       Opacity[1.], LineBox[CompressedData["
1:eJxFxWlIkwEYAODZ1GBOcEmimds3W07nvIogI480yPIg0yVMOjZ1k7xSHJha
mWk6QlslnowxTUPEmTEDO5apaV4LXVmxReIc0lLI1tCptOqH7/vj4WEKC85l
7SKRSIn//F9+Q+gcltkWufOojkhII65F7Wwf09wmCCksH6pjOBEtcG6EJG+d
0Q3rtrIbfjIG4d36RfYqYwJWTioKfzC+wKo+qT432AyLo2ZbVooscL4pwKhW
2WAKs4r97Sgpeud6tymO8jIZFupTX5OnneHCt1XCAjYF7r9KTfE87Qory3LM
oWlucKViO/n3Cg0m6RaiX5a6w37FopJUzl54ydp03uWVB3zGdOX6g0JPOGlJ
Fkin74PNI8KKd73ecDBt3if2kg9MibIKDBY6fGqVv+7LI+DPw5kOfC4THqgd
vUhYcZGTZEGr9YUzisoGqK0H4BBxoDZBwILf7+G6SMIPwi9UlW1csh9c5sA5
O/0VpxhK4/LVbNjUxWxQlPvDDf5ejoO8AFjWKhoXEByY33BBS13GN0522hSa
QNhoiikZruHC7RFh3jOCILi3WkITBwXDNbyMeLIVP2JQdtfMhMDNAW29M/Gh
8M2huub4QTzRm9c5yQqDT+SPp9OkuGK/kDVtxVkjjxuT0g/BsqBhzpwGF1kc
Zyc4h2Fh/y9Ceg/PrUzZPnMfl6SoP1Ef4rVWSb2sEVeF27aa5LjtjX2+qweX
zVHrRsfx1o687DsTeEexNjZuCn/mIduc0uIGvnu27iPONnrFLhrxUHUp/ZEJ
P1att2Ut4wls+ZPvZrwoh6CvreHlx2/ZnlrwatfFD8VWvLmv4+7GBt5e4Sh+
von3JGfFlG/jat8xn8g/uMbiZ7Pb8b9nFSpz
        "]]},
      Annotation[#, "Charting`Private`Tag$45469#1"]& ]}, {}},
   AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
   Axes->{True, True},
   AxesLabel->{None, None},
   AxesOrigin->{0, 0},
   DisplayFunction->Identity,
   Frame->{{False, False}, {False, False}},
   FrameLabel->{{None, None}, {None, None}},
   FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
   GridLines->{None, None},
   GridLinesStyle->Directive[
     GrayLevel[0.5, 0.4]],
   ImagePadding->All,
   Method->{
    "DefaultBoundaryStyle" -> Automatic, 
     "DefaultGraphicsInteraction" -> {
      "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
       "Effects" -> {
        "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
         "Droplines" -> {
          "freeformCursorMode" -> True, 
           "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
     "DefaultMeshStyle" -> AbsolutePointSize[6], "ScalingFunctions" -> None, 
     "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
         (Identity[#]& )[
          Part[#, 1]], 
         (Identity[#]& )[
          Part[#, 2]]}& ), "CopiedValueFunction" -> ({
         (Identity[#]& )[
          Part[#, 1]], 
         (Identity[#]& )[
          Part[#, 2]]}& )}},
   PlotRange->{{0, 20}, {0., 19.999999591836733`}},
   PlotRangeClipping->True,
   PlotRangePadding->{{
      Scaled[0.02], 
      Scaled[0.02]}, {
      Scaled[0.05], 
      Scaled[0.05]}},
   Ticks->{Automatic, Automatic}], "]"}]], "Output",
 CellChangeTimes->{3.801578660843761*^9},
 CellLabel->"Out[62]=",ExpressionUUID->"480dbaa7-4e18-4434-a184-926cafb0b26f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    SuperscriptBox["2", "a"], "=", 
    FractionBox[
     SqrtBox["8"], 
     SuperscriptBox["4", "3"]]}], ",", "a"}], "]"}]], "Input",
 CellChangeTimes->{{3.801578736134945*^9, 3.801578804127736*^9}, 
   3.8015788416517563`*^9},
 CellLabel->"In[66]:=",ExpressionUUID->"44600480-47c9-4a25-8aa7-5ac0f2866dfe"],

Cell[BoxData[
 TemplateBox[{
  "Set", "write", 
   "\"Tag \\!\\(\\*RowBox[{\\\"Power\\\"}]\\) in \
\\!\\(\\*SuperscriptBox[\\\"2\\\", \\\"a\\\"]\\) is Protected.\"", 2, 66, 21, 
   23180306378915507075, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.8015788438430557`*^9},
 CellLabel->
  "During evaluation of \
In[66]:=",ExpressionUUID->"f1bb259e-ac64-4ced-a408-5904bda96bb6"],

Cell[BoxData[
 TemplateBox[{
  "Solve", "naqs", 
   "\"\\!\\(\\*FractionBox[\\\"1\\\", RowBox[{\\\"16\\\", \\\" \\\", SqrtBox[\
\\\"2\\\"]}]]\\) is not a quantified system of equations and inequalities.\"",
    2, 66, 22, 23180306378915507075, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.8015788438520613`*^9},
 CellLabel->
  "During evaluation of \
In[66]:=",ExpressionUUID->"5b0198a1-73c4-4e47-b270-3bd0fe33f984"],

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   FractionBox["1", 
    RowBox[{"16", " ", 
     SqrtBox["2"]}]], ",", "a"}], "]"}]], "Output",
 CellChangeTimes->{{3.8015787909603453`*^9, 3.8015788050101395`*^9}, 
   3.801578843859063*^9},
 CellLabel->"Out[66]=",ExpressionUUID->"2b06e8d1-da7f-4e3f-93ba-157135f7b31c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "[", "%", "]"}]], "Input",
 CellChangeTimes->{{3.8015788109711027`*^9, 3.8015788194500246`*^9}},
 CellLabel->"In[65]:=",ExpressionUUID->"938bae5f-6a25-4f5a-bec0-571e83404e02"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"a", "\[Rule]", 
    TemplateBox[{
      RowBox[{
        RowBox[{"-", "4.5`"}], "+", 
        RowBox[{
          RowBox[{"(", 
            RowBox[{
              RowBox[{"0.`", "\[VeryThinSpace]"}], "+", 
              RowBox[{"9.064720283654387`", " ", "\[ImaginaryI]"}]}], ")"}], 
          " ", 
          TemplateBox[{"1"}, "C"]}]}], 
      RowBox[{
        TemplateBox[{"1"}, "C"], "\[Element]", 
        TemplateBox[{}, "Integers"]}]},
     "ConditionalExpression"]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{3.801578819677432*^9},
 CellLabel->"Out[65]=",ExpressionUUID->"39b1ced2-8978-44ee-8806-ec790d5a1051"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "Solve 2^a = Sqrt[8]/4^3 for a", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Extrusion", "Warnings", "Assumptions", "Pods", "Unsuccessful"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {"RealSolution", "Real solution", 1, 1, "Content"}, 
      "ExtrusionOpen" -> False, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {
   "Extrusion", "Warnings", "Assumptions", "Pods", "Unsuccessful"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Solve[2^a == Sqrt[8]/4^3, a]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"solve\"", {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    TagBox[
                    RowBox[{
                    SuperscriptBox["2", "a"], "\[LongEqual]", 
                    TagBox[
                    FractionBox[
                    SqrtBox["8"], 
                    SuperscriptBox["4", "3"]], Identity]}], HoldForm], 
                    StyleBox["\" for \"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "a"}}, GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None, None, None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    $CellContext`TagBoxWrapper["Separator" -> " "]], 
                   LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                  BaselinePosition -> Center]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               ColumnsEqual -> False, RowsEqual -> False, 
               GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
               AllowScriptLevelChange -> False], 
              $CellContext`TagBoxWrapper["Separator" -> " "]], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext,minput"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Result", "scanner" -> "Solve", "id" -> "Result", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "1", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Reduce[2^a == 1/(16 Sqrt[2]), a]"}], 
       XMLElement[
       "moutput", {}, {
        "a == ((I/2) (4 Pi C[1] + (9 I) Log[2]))/Log[2] && Element[C[1], \
Integers]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              StyleBox["\" and \"", {
                GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                LineIndent -> 0}], 
              RowBox[{"a", "\[LongEqual]", 
                TagBox[
                 FractionBox[
                  RowBox[{
                    RowBox[{"-", 
                    RowBox[{"9", " ", 
                    RowBox[{"log", "(", "2", ")"}]}]}], "+", 
                    
                    RowBox[{
                    "4", " ", "\[ImaginaryI]", " ", "\[Pi]", " ", "n"}]}], 
                  RowBox[{"log", "(", "4", ")"}]], Identity]}], 
              RowBox[{"n", "\[Element]", 
                TagBox["\[DoubleStruckCapitalZ]", 
                 Function[{}, Integers]]}]}, "RowWithSeparator"], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "Approximate form", "input" -> 
         "Result__Approximate form"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Result__Step-by-step solution", "stepbystep" -> "true"}, {}]}], 
     XMLElement["infos", {"count" -> "2"}, {
       XMLElement["info", {"text" -> "log(x) is the natural logarithm"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Log.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ElementaryFunctions/Log", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/NaturalLogarithm.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}]}], 
       XMLElement["info", {"text" -> "Z is the set of integers"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Integers.html", 
           "text" -> "Documentation", "title" -> "Documentation"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Z.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}]}]}], Typeset`pod3$$ = 
   XMLElement[
   "pod", {"title" -> "Real solution", "scanner" -> "Solve", "id" -> 
     "RealSolution", "position" -> "300", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Solve[2^a == 1/(16 Sqrt[2]), {a}]"}], 
       XMLElement["moutput", {}, {"{{a -> -9/2}}"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{"a", "\[LongEqual]", 
              TagBox[
               RowBox[{"-", 
                 FractionBox["9", "2"]}], Identity]}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "Decimal form", "input" -> 
         "RealSolution__Decimal form"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "RealSolution__Step-by-step solution", "stepbystep" -> 
         "true"}, {}]}]}], Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Plot", "scanner" -> "Solve", "id" -> "RootPlot", 
     "position" -> "400", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Plot[{2^a, 1/(16 Sqrt[2])}, {a, -2., 2.}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              GraphicsBox[{{{{}, {}, 
                  TagBox[{
                    Directive[
                    Opacity[1.], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]], 
                    LineBox[CompressedData["
1:eJwBEQPu/CFib1JlAgAAADAAAAACAAAAl8p8j5mZFcD9CjIuYECYP+KJyZtG
lxXA7CHMaCZKmD8uSRao85QVwLBU5pPwU5g/xsevwE2QFcClj/XBkGeYP/TE
4vEBhxXA/MwcqgCPmD9Qv0hUanQVwL0OlxGg3pg/CLQUGTtPFcBRwaaX6ICZ
P3idrKLcBBXAKe3NgP3Rmj/j8KrinGMUwAzsLRjX6Z0/gT2srAzNE8BoBg2g
uo+gP26wSYxwORPAUFJ46TxNoj/lo7WYUZkSwLMoJCiYZaQ/jpAkL+IDEsAo
W41KaZGmP8H9YfLvYRHAC8dUDMIuqT9EkTvL8cIQwPlx+AVJC6w/+R0YLqMu
EMCWYgI6bQGvP3BWhnujGw/AWUESpSFJsT9TY+KuX+8NwA136r56IrM/1bx2
DQTJDMCPwkeFoSO1P2oXqMWiiQvAHqDlamKNtz9lZN+RoF8KwMjq0N89Dbo/
c7Kzt5gcCcBjyEDnvQ+9PyBNwAh53wfAcsmQZlctwD8z2tJtuLcGwH2wIj5W
4cE/WWiCLPJ2BcBe+dG9Qu7DP+ToN/+KSwTAPpAzkWQOxj+CaoorHgcDwG+z
SDmyncg/vzgVg5nIAcC3igtyAWvLP2L5pe5znwDAi3Fy0Z5Rzj8wdqdnkbr+
v4fkaDDm59A/Z94OGvlg/L/NxMvOtbfSP93f5iIxE/q/VntDk6Gu1D944/je
XZP3v2vNOKAXDNc/3ssWw0g+9b/ob8m8Z3/ZP2q2bloot/K/e6hR59Ry3D81
OjdI2Dvwv7c2w8J0rd8/lkUXvIzW679nMxy2aYLhPw4bNE5S0ea/c/dZDVqF
4z8cumgwlCHiv3Gx2vlKm+U/Txf9fu0S279nCiQuDt7nP/3CEGqFGtG/ZqD2
FseW6j9dB1DVVzS/vwhxIKtLaO0/ubUFlDVEoj885zOwjWbwPzK4S3RVZsc/
MA7TQVcp8j+AnAhoje7UP/cnCtM+EvQ/UFQDSR3y3j/tivEC2172P3o850Ra
JeQ/5dnCRuTA+D/8C4F6HazkP94tJ8RCDfk/IZV/6g==
                    "]]}, Annotation[#, "Charting`Private`Tag$1967896#1"]& ], 
                  TagBox[{
                    Directive[
                    Opacity[1.], 
                    RGBColor[0.6, 0.24, 0.4428931686004542], 
                    AbsoluteThickness[1]], 
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGAwAWIQPf1UTf/MmaIHzljXp81bsMyeY4uIpLU/gl8xd82i
OywI/uMPqx7NSRaB8xtt16zhOSsM5+dt8OwpsETwny7eOiNwphCc3zdBRf8R
M4J/8G/ip/eJgnC+y0Tr0x8PCcD5P2Ul9BbrIfgFYW3Vi6X54fzg5Efr4t/z
wvlX95TxspzkgfOzxFccXdTJDeenptyfuCCeC84v3rR5+wwZTjhfwfcAR+V9
djjf+Nal3B3b2eD8yIwmnU9lrHD+kxfm/7u8WeD8pqwubTl2Zjh/v4Vo88wT
jHB+0s+l74rnM8D5BmXL0yfu+rcfxk+/xyf1M+EPnH/3/jMlQ+FfcH7F4x/3
Yid/h/PvnRY77GH3Fc7P2pYXpbH9E5xvamXuccP6A5w/zVV8T8+113A+n7SJ
X9DFZ3C+zK4MgymKj+B8f/G/dW+FbsP5fw8JZLVKXYTzY9kDroab7Ifzd25l
nWLqssgexjfa4V0SmnYczm+Yw5HR++4KnB8Qwuwp++kenF9l89wlSvUJQv2p
G3V7TF/C+ZxqL7nr9N7B+X9vFyx5mPERzr+otLm//81nOP9my8ugetdvcP5i
3/X75036Aee7i1hXnhT8DecrfNvFZZb2F85vLJX4KLX5H5z/6Evp9f///8P5
ACYCqgM=
                    "]]}, 
                   Annotation[#, 
                    "Charting`Private`Tag$1967896#2"]& ]}}, {}, {}}, {
               GridLines -> Dynamic[
                  Map[{{#, 
                    GrayLevel[0.7]}}& , 
                   MousePosition[{"Graphics", Graphics}, None]]], 
                DisplayFunction -> Identity, Ticks -> {Automatic, Automatic}, 
                AxesOrigin -> {0, 0}, FrameTicks -> {{Automatic, {{0., 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {0.5, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {1., 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {1.5, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {0.1, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {0.2, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {0.3, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {0.4, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {0.6, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {0.7, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {0.8, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {0.9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {1.1, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {1.2, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {1.3, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {1.4, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {1.6, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {1.7, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {1.8, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {1.9, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {2., 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}}}, {Automatic, {{-4., 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {-2., 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {0., 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {2., 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.01, 0.}, {
                    AbsoluteThickness[0.1]}}, {-6., 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-5.5, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-5., 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-4.5, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-3.5, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-3., 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-2.5, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-1.5, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-1., 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {-0.5, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {0.5, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {1., 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}, {1.5, 
                    FormBox[
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {0, 0}, BaselinePosition -> 
                    Baseline], "CacheGraphics" -> False], 
                    Spacer[{0, 0}], Selectable -> False], TraditionalForm], {
                    0.005, 0.}, {
                    AbsoluteThickness[0.1]}}}}}, GridLines -> {None, None}, 
                DisplayFunction -> Identity, PlotRangePadding -> {{
                   Scaled[0.02], 
                   Scaled[0.02]}, {
                   Scaled[0.05], 
                   Scaled[0.05]}}, PlotRangeClipping -> True, ImagePadding -> 
                All, DisplayFunction -> Identity, AspectRatio -> 
                NCache[GoldenRatio^(-1), 0.6180339887498948], 
                Axes -> {True, True}, AxesLabel -> {None, None}, 
                AxesOrigin -> {0, 0}, AxesStyle -> Directive[
                  AbsoluteThickness[0.2]], BaseStyle -> Automatic, 
                DisplayFunction :> Identity, Epilog -> {
                  AbsolutePointSize[5], 
                  Hue[0], {
                   TagBox[
                    TooltipBox[
                    PointBox[{-4.500000000276594, 0.0441941738156863}], 
                    TemplateBox[{"\"(\"", 
                    RowBox[{"-", "4.5000000002765938514`7.9772948850955"}], 
                    "\",\"", "0.0441941738156863023`7.483256910248324", 
                    "\")\""}, "RowDefault"]], Annotation[#, 
                    
                    Row[{"(", -4.5000000002765938514`7.9772948850955, ",", 
                    0.0441941738156863023`7.483256910248324, ")"}], 
                    "Tooltip"]& ]}}, 
                Frame -> {{False, False}, {False, False}}, 
                FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                Directive[
                  AbsoluteThickness[0.2]], 
                FrameTicks -> {{Automatic, Automatic}, {
                  Automatic, Automatic}}, GridLines -> {None, None}, 
                GridLinesStyle -> {
                  GrayLevel[0.85], 
                  GrayLevel[0.9]}, ImageSize -> 330., 
                Method -> {
                 "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
                  PointSize[Medium], "PointSizeFunction" -> "SmallPointSize", 
                  "ScalingFunctions" -> None, 
                  "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Identity[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Identity[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, 
                PlotRange -> {{-5.400000000331913, 2.}, {0., 
                 1.5657375013569133`}}, PlotRangeClipping -> True, 
                PlotRangePadding -> {{
                   Scaled[0.02], 
                   Scaled[0.02]}, {
                   Scaled[0.02], 
                   Scaled[0.02]}}, Prolog -> {
                  Opacity[0], 
                  TagBox[
                   RectangleBox[
                    Scaled[{0, 0}], 
                    Scaled[{1, 1}]], Annotation[#, "Plot", "Frame"]& ]}, 
                Ticks -> {Automatic, Automatic}}], 
              TagBox[
               GridBox[{{
                  GraphicsBox[{
                    RGBColor[0.24720000000000014`, 0.24, 0.6], {
                    AbsoluteThickness[2], 
                    LineBox[{{0, 0}, {1, 0}}]}}, ImageSize -> NCache[
                    Rational[143, 10], 14.3], 
                   BaselinePosition -> (Center -> Center)], 
                  StyleBox[
                   SuperscriptBox["2", "a"], {
                   FontFamily -> "Verdana", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                  GraphicsBox[{
                    RGBColor[0.6, 0.24, 0.4428931686004542], {
                    AbsoluteThickness[2], 
                    LineBox[{{0, 0}, {1, 0}}]}}, ImageSize -> NCache[
                    Rational[143, 10], 14.3], 
                   BaselinePosition -> (Center -> Center)], 
                  StyleBox[
                   FractionBox["1", 
                    RowBox[{"16", " ", 
                    SqrtBox["2"]}]], {FontFamily -> "Verdana", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                AutoDelete -> False, 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {"Columns" -> {{0.3}}, "Rows" -> {{0.3}}}],
                "Grid"]}, "Labeled", DisplayFunction -> (FormBox[
               GridBox[{{
                  TagBox[
                   ItemBox[
                    PaneBox[
                    TagBox[#, "SkipImageSizeLevel"], 
                    Alignment -> {Center, Baseline}, BaselinePosition -> 
                    Baseline], DefaultBaseStyle -> "Labeled"], 
                   "SkipImageSizeLevel"], 
                  
                  ItemBox[#2, Alignment -> {Inherited, Bottom}, 
                   DefaultBaseStyle -> "LabeledLabel"]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                BaselinePosition -> {1, 1}], TraditionalForm]& ), 
             InterpretationFunction -> (RowBox[{
                StyleBox[
                "Labeled", FontFamily -> "Bitstream Vera Sans", 
                 FontSize -> -1 + Inherited], "[", 
                RowBox[{#, ",", #2, ",", 
                  RowBox[{"(", "\[NoBreak]", 
                    GridBox[{{
                    StyleBox[
                    "Right", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], 
                    StyleBox[
                    "Bottom", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited]}}, RowSpacings -> 1, 
                    ColumnSpacings -> 1, RowAlignments -> Baseline, 
                    ColumnAlignments -> Center], "\[NoBreak]", ")"}]}], 
                "]"}]& )], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {True, False, {False}, True},
    Typeset`aux4$$ = {True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "4", "datatypes" -> 
    "Solve", "timedout" -> "", "timedoutpods" -> "", "timing" -> 
    "1.5270000000000001", "parsetiming" -> "0.745", "parsetimedout" -> 
    "false", "recalculate" -> "", "id" -> 
    "MSP2354132fbe89eac12eig00003020h0hhf09igff5", "host" -> 
    "https://www5a.wolframalpha.com", "server" -> "16", "related" -> 
    "https://www5a.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa2355132fbe89eac12eig00004715266e8cf69gcb790697034197112851", "version" -> 
    "2.6"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 2., 
    "Date" -> {2020, 6, 19, 20, 9, 45.7803776`9.413254236867992}, "Line" -> 
    68, "SessionID" -> 23180306378915507075}, Typeset`showpods$$ = {1, 2, 3, 
   4}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "RealSolution", "Real solution", 1, 1, "Content"}, Typeset`open$$ = False, 
   Typeset`newq$$ = "Solve 2^a = Sqrt[8]/4^3 for a"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{246., {31., 21.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$}],
        Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[68]:=",ExpressionUUID->"54716a7d-e838-4df9-bc4f-0932e11a0dc6"],

Cell[BoxData[
 InterpretationBox[
  FrameBox[
   StyleBox[
    FormBox[
     RowBox[{"a", "\[LongEqual]", 
      RowBox[{"-", 
       FractionBox["9", "2"]}]}],
     TraditionalForm], "Output",
    CellSize->{550, Automatic},
    AutoStyleOptions->{"HighlightFormattingErrors"->False},
    ScriptLevel->0,
    NumberPoint->".",
    RenderingOptions->{"3DRenderingMethod"->"BSPTreeOrDepthBuffer"},
    FontFamily->"Times",
    FontSize->14,
    Background->None,
    GraphicsBoxOptions->{DefaultAxesStyle->Directive[
      GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 1, 
      "GraphicsAxes"],
    DefaultBaseStyle->{FontFamily -> "Times", "Graphics"},
    DefaultFrameStyle->Directive[
      GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 1, 
      "GraphicsFrame"],
    DefaultFrameTicksStyle->Directive[
     FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"],
    DefaultTicksStyle->Directive[
     FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]},
    Graphics3DBoxOptions->{
    DefaultBaseStyle->{FontFamily -> "Times", "Graphics3D"}}],
   BaseStyle->{Plain},
   FrameMargins->10,
   FrameStyle->GrayLevel[0.85],
   RoundingRadius->5,
   StripOnInput->False],
  WolframAlphaResult[
  "Solve 2^a = Sqrt[8]/4^3 for a", {{"RealSolution", 1}, 
    "Content"}]]], "Output",
 CellChangeTimes->{3.8015789136843767`*^9, 3.801579023881501*^9},
 CellLabel->"Out[68]=",ExpressionUUID->"e20ba9bc-e19f-4111-8768-b093bee0c5e6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "[", "%", "]"}]], "Input",
 CellChangeTimes->{{3.8015790323118258`*^9, 3.801579035946787*^9}},
 CellLabel->"In[69]:=",ExpressionUUID->"efb1b35e-1827-4adf-9365-d66ce2f00309"],

Cell[BoxData[
 InterpretationBox[
  FrameBox[
   StyleBox[
    FormBox[
     RowBox[{"a", "\[LongEqual]", 
      RowBox[{"-", 
       FractionBox["9", "2"]}]}],
     TraditionalForm], "Output",
    CellSize->{550, Automatic},
    AutoStyleOptions->{"HighlightFormattingErrors"->False},
    ScriptLevel->0,
    NumberPoint->".",
    RenderingOptions->{"3DRenderingMethod"->"BSPTreeOrDepthBuffer"},
    FontFamily->"Times",
    FontSize->14,
    Background->None,
    GraphicsBoxOptions->{DefaultAxesStyle->Directive[
      GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 1, 
      "GraphicsAxes"],
    DefaultBaseStyle->{FontFamily -> "Times", "Graphics"},
    DefaultFrameStyle->Directive[
      GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 1, 
      "GraphicsFrame"],
    DefaultFrameTicksStyle->Directive[
     FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"],
    DefaultTicksStyle->Directive[
     FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]},
    Graphics3DBoxOptions->{
    DefaultBaseStyle->{FontFamily -> "Times", "Graphics3D"}}],
   BaseStyle->{Plain},
   FrameMargins->10,
   FrameStyle->GrayLevel[0.85],
   RoundingRadius->5,
   StripOnInput->False],
  WolframAlphaResult[
  "Solve 2^a = Sqrt[8]/4^3 for a", {{"RealSolution", 1}, 
    "Content"}]]], "Output",
 CellChangeTimes->{3.801579038715397*^9},
 CellLabel->"Out[69]=",ExpressionUUID->"ae0fdc42-f7b3-40a3-850f-6b1cb914cbe5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "[", 
  RowBox[{
   RowBox[{"-", "9"}], "/", "2"}], "]"}]], "Input",
 CellChangeTimes->{{3.8015790519287705`*^9, 3.801579061075058*^9}},
 CellLabel->"In[70]:=",ExpressionUUID->"2f957717-15c5-449a-898c-1fc4692ecda2"],

Cell[BoxData[
 RowBox[{"-", "4.5`"}]], "Output",
 CellChangeTimes->{3.801579061684697*^9},
 CellLabel->"Out[70]=",ExpressionUUID->"e170a973-f356-4f54-a4ce-fcbcbac7287d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Simplify", "[", 
  SqrtBox[
   FractionBox[
    RowBox[{
     SuperscriptBox["x", "16"], "*", 
     RowBox[{"(", 
      RowBox[{"1", "+", 
       SuperscriptBox["x", "2"]}], ")"}]}], "9"]], "]"}]], "Input",
 CellChangeTimes->{{3.801579074164366*^9, 3.801579127135021*^9}},
 CellLabel->"In[71]:=",ExpressionUUID->"59d37f11-40c0-4dd9-948f-695a9fe9841c"],

Cell[BoxData[
 RowBox[{
  FractionBox["1", "3"], " ", 
  SqrtBox[
   RowBox[{
    SuperscriptBox["x", "16"], "+", 
    SuperscriptBox["x", "18"]}]]}]], "Output",
 CellChangeTimes->{3.801579128138647*^9},
 CellLabel->"Out[71]=",ExpressionUUID->"9a86d611-2859-4f9f-afdc-e2d94c9550a7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "Simplify[Sqrt[(x^16*(1 + x^2))/9]]", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Extrusion", "Warnings", "Assumptions", "Pods", "Unsuccessful"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {
       "Fast parse", "Fast parse", 1, 0, "Input", 
        "Simplify[Sqrt[(x^16*(1 + x^2))/9]]"}, "ExtrusionOpen" -> True, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {
   "Extrusion", "Warnings", "Assumptions", "Pods", "Unsuccessful"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Simplify[Sqrt[(x^16 (1 + x^2))/9]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"simplify\"", {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    StyleBox[
                    SqrtBox[
                    RowBox[{
                    FractionBox["1", "9"], " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{
                    SuperscriptBox["x", "16"], " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "+", 
                    SuperscriptBox["x", "2"]}], ")"}]}], 
                    PolynomialForm[#, TraditionalOrder -> False]& ], ")"}]}]],
                     ScriptLevel -> 0, StripOnInput -> False]}}, 
                    GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    $CellContext`TagBoxWrapper["Separator" -> " | "]], 
                   LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                  BaselinePosition -> Center]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               ColumnsEqual -> False, RowsEqual -> False, 
               GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
               AllowScriptLevelChange -> False], 
              $CellContext`TagBoxWrapper["Separator" -> " | "]], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext,minput"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Result", "scanner" -> "Simplification", "id" -> 
     "Result", "position" -> "200", "error" -> "false", "numsubpods" -> "1", 
     "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"FullSimplify[Sqrt[x^16 (1 + x^2)]/3]"}], 
       XMLElement["moutput", {}, {"Sqrt[x^16 + x^18]/3"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               FractionBox["1", "3"], " ", 
               SqrtBox[
                RowBox[{
                  SuperscriptBox["x", "18"], "+", 
                  SuperscriptBox["x", "16"]}]]}], Identity], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Alternate forms assuming x is real", "scanner" -> 
     "Simplification", "id" -> "RealAlternateForm", "position" -> "300", 
     "error" -> "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               FractionBox["1", "3"], " ", 
               SuperscriptBox["x", "8"], " ", 
               SqrtBox[
                RowBox[{
                  SuperscriptBox["x", "2"], "+", "1"}]]}], Identity], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"ComplexExpand[Sqrt[x^16 (1 + x^2)]/3]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               FractionBox["1", "3"], " ", 
               SqrtBox[
                SuperscriptBox["x", "16"]], " ", 
               SqrtBox[
                RowBox[{
                  SuperscriptBox["x", "2"], "+", "1"}]]}], Identity], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Plots", "scanner" -> "Simplification", "id" -> "Plot", 
     "position" -> "400", "error" -> "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[Sqrt[x^16 + x^18]/3, {x, -12, 12}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max3087$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min3086$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min3086$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max3087$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$1816721$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min3086$\
1816726$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max3087$1816727$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max3087$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min3086$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$1816721$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min3086$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min3086$\
1816726$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max3087$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max3087$\
1816727$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$1816698[
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], HoldAll][
                    Rational[1, 3] ($CellContext`x^16 + $CellContext`x^18)^
                    Rational[1, 2], {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min3086$$], 
                    (
                    Piecewise[{{
                    0. + 12.785777813090382` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    12.785777813090382` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min3086$$], \
-11.96], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min3086$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max3087$$]], 
                    (
                    Piecewise[{{
                    0. + 12.785777813090382` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    12.785777813090382` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min3086$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max3087$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min3086$$ + 
                    0.023920000000000004`, 
                    CalculateUtilities`GraphicsUtilities`Private`max3087$$]], 
                    11.96]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> 39, 
                    PlotRange -> {Automatic, Automatic}, LabelStyle -> {}, 
                    Ticks -> Automatic, ImageSize -> 220., AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min3086$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max3087$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$1816698]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1816698[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1816698[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbinv7/\
APkPiMKCDgCxLQwZg0oCTle734klq4drCdbfDnwWc3SbN2lWI6QFP64VRfmsd3zz13vQcHMkr7vV5P\
X7Tmg+Q0vYKn+9aM5DyXhaDvjnMFWjMp0gv47Lo1MZgd4OQHUO+7bM17qebE+PMrfJ/\
wpODEwFfDODMM9HRXkXzGEl17xood2p9MuUwIZz/\
h4fDl8PmL4WMPg7GMiTGghH7aFjKfKaIh7SHQJWveciK++\
eO98vip4DyG7wWIBPQd650oQi2MFIRjPsG3nm+\
mbmJihghKFD1zmpw8R20v0EYxkU1gnuMbp5M1bAtMVKY9N7dKbjYpyId/FR/\
I2MXkPS5pd3YEhoVxzug7Kat/zt0Az6/bwit5tJ44zO8NR96IYYegV+\
l81LpOnpGqa130C67Oar5sNcjTp0z9v7TPtFkN40nbMGB+YGu8Xnur8M/\
awsscu34h7tvWfPaOEnDdcKgE91HSgi+iaKY88BJtn67OrcNj3Kj4jtEZUsEKJ7Jxlv3i+\
uNuBV5vCjHWbroF6Yh6BkSQg3VRx+\
0Oy5gZzYgiiQVeXNcvm2wi61AC7mxfeyYoswPME7JpeUKzly7VnZhk9uWPilvJ5USTIe97wkAGaqPo\
r2F9lCVX0IkMjCTGC5p6DeawSmpMVLDsByVInBPBEJL9sh/\
3zT9crgRStatQXcqzOHClOQ5Pol8WeB9EZmbNHTtwdAW3LWYTyaNadRFL0+Vpsz2m+\
02mGzc0B3ooCaElCR/o3abQbQp/dVNY2YO7NaFbE7o1oVsTujXh/10TXMT4r/Qbd364Xg=="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[Sqrt[x^16 + x^18]/3, {x, -84, 84}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max3089$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min3088$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min3088$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max3089$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$1816816$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min3088$\
1816817$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max3089$1816818$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max3089$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min3088$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$1816816$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min3088$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min3088$\
1816817$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max3089$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max3089$\
1816818$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$1816795[
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], HoldAll][
                    Rational[1, 3] ($CellContext`x^16 + $CellContext`x^18)^
                    Rational[1, 2], {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min3088$$], 
                    (
                    Piecewise[{{
                    0. + 89.50044469163267 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    89.50044469163267 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min3088$$], \
-83.72], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min3088$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max3089$$]], 
                    (
                    Piecewise[{{
                    0. + 89.50044469163267 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 89.50044469163267 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min3088$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max3089$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min3088$$ + 
                    0.16744, 
                    CalculateUtilities`GraphicsUtilities`Private`max3089$$]], 
                    83.72]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> 69, 
                    PlotRange -> {Automatic, Automatic}, LabelStyle -> {}, 
                    Ticks -> Automatic, ImageSize -> 220., AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min3088$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max3089$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$1816795]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1816795[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[CalculateUtilities`GraphicsUtilities`Private`lines, 
                    Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[CalculateUtilities`GraphicsUtilities`Private`pt, 1, 
                    1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1816795[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === L\
ength[CalculateUtilities`GraphicsUtilities`Private`intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbikw3hn8AyQ+\
I8qb9gVp0MGYNKAk5XtviZNYuHawnW3w58FnN0mzdpViOkBT+uFUX5rHd889d71HRyJI+\
r1eT1015oNgcbKFp4fGjMQsFwWP353mkihFBU+u4LNbxoRE7xEGP0jsfNeNeS/\
kDLQ7v8b3gUUFA02+asqopkRN9yXkGY1U7RlLemx+MmUiAkZ/\
ksfDneGrnacvHQzGMgatieTqeVvIPJOgSNJDoGvGvGXAv7njg/\
L4qWAsJN8LwiOi7hvvREJsYAQHhvl433q5mbqDiWngMcj4wmmy8hy1vUBpSXk6IbMc3zifrGFbYJCp\
ctzcLblZpyAX/g18IEIbk/PYpO3ZEugXxiWj76ys/jl3AzzvtoWX4mQ1cZjfG4a8gabHRC3T+\
aR1nRwjVdfa6OdcXdR82WiQ50+Z+n/pkCq9HMaztmGQ2ZGp8WrtLcO/\
aAsvcuz6ubjvGfPZOUrAVcOhEtxHERdsHkUz5YGTaPt0VW4cDuN2xXeITp8KVjiBibPsF9sf2xV4vS\
mEWLvpBqTD6xkQkJwYV2y53aMp1aMMJEQGeH5dv2yyiahD8bizfe0pj6kZYI6QdcsTmoNkoe6go+\
zLHxW3ksuZJkPeD7gmKZFrRX8T6yMNuTyeCM9IQrygqVdvDqukxiC9ZT8oQcIcOEVI+\
st87Df3cLESSNW+RHVJx+LAlubUP4l+\
WeBDwlOdNXdsz9Hl3baYTSBOatUFNEkWp83mmO43mW7c0BzoviT4lsR/oHebQrcp/\
NVNYWkP7taEbk3o1oRuTejWhP93TbAR47/Sb9hzuIY="]]}; Typeset`initDone$$ = True), 
                DynamicModuleValues :> {}, Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "2DMathPlot"}, {}], "\n  ", 
       XMLElement["expressiontype", {"name" -> "2DMathPlot"}, {}], "\n "}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {
   True, False, {False, False}, True}, Typeset`aux4$$ = {
   True, False, {False, False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "4", "datatypes" -> 
    "Simplify", "timedout" -> "", "timedoutpods" -> "", "timing" -> "1.334", 
    "parsetiming" -> "0.587", "parsetimedout" -> "false", "recalculate" -> "",
     "id" -> "MSP267423892a6b92a83edf00004537h829fifdc6bf", "host" -> 
    "https://www5a.wolframalpha.com", "server" -> "51", "related" -> 
    "https://www5a.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa267523892a6b92a83edf00004ig8c50gia4h2g157297982070693509567", "version" -> 
    "2.6"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 2., 
    "Date" -> {2020, 6, 19, 20, 12, 33.5149702`9.277813736726324}, "Line" -> 
    73, "SessionID" -> 23180306378915507075}, Typeset`showpods$$ = {1, 2, 3, 
   4}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "Fast parse", "Fast parse", 1, 0, "Input", 
    "Simplify[Sqrt[(x^16*(1 + x^2))/9]]"}, Typeset`open$$ = True, 
   Typeset`newq$$ = "Simplify[Sqrt[(x^16*(1 + x^2))/9]]"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{840., {1486., 27.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$}],
        Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",ExpressionUUID->\
"c092da98-531d-44b6-8935-91d6b1da8e8d"],

Cell[BoxData[
 RowBox[{
  FractionBox["1", "3"], " ", 
  SqrtBox[
   RowBox[{
    SuperscriptBox["x", "16"], "+", 
    SuperscriptBox["x", "18"]}]]}]], "Output",
 CellChangeTimes->{3.8015791491010036`*^9},
 CellLabel->"Out[72]=",ExpressionUUID->"fcfee951-125b-4ef9-884f-366f7bb43d6e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Log", "[", 
     RowBox[{"10", ",", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"x", "+", "1"}], ")"}], "2"]}], "]"}], "==", "2"}], ",", 
   "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.8015792248309937`*^9, 3.8015792747554727`*^9}},
 CellLabel->"In[74]:=",ExpressionUUID->"38f96df9-562c-4b23-b8f4-d792f5adf125"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", 
     RowBox[{"-", "11"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "9"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.8015792686019745`*^9, 3.801579275378736*^9}},
 CellLabel->"Out[74]=",ExpressionUUID->"d33b7154-932d-4ca9-977e-cb9c3dff9f5c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{"80", "==", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"A", "*", "\[ExponentialE]"}], ")"}], 
     RowBox[{
      RowBox[{"-", "k"}], "*", "2"}]]}], ",", 
   RowBox[{"{", 
    RowBox[{"A", ",", "k"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8015793478055625`*^9, 3.801579492780921*^9}, {
  3.801579608927596*^9, 3.8015796372038484`*^9}, {3.801579886663204*^9, 
  3.8015798894848742`*^9}, {3.801579930204465*^9, 3.8015799425023766`*^9}},
 CellLabel->"In[81]:=",ExpressionUUID->"95e2453b-aa32-4fe0-9d29-41b338e56e46"],

Cell[BoxData[
 TemplateBox[{
  "Solve", "svars", 
   "\"Equations may not give solutions for all \\\"solve\\\" variables.\"", 2,
    81, 29, 23180306378915507075, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.8015799435543876`*^9},
 CellLabel->
  "During evaluation of \
In[81]:=",ExpressionUUID->"d6099e2b-4eff-4245-9035-27e310379b31"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"k", "\[Rule]", 
    RowBox[{"-", 
     FractionBox[
      RowBox[{"Log", "[", "80", "]"}], 
      RowBox[{"2", " ", 
       RowBox[{"(", 
        RowBox[{"1", "+", 
         RowBox[{"Log", "[", "A", "]"}]}], ")"}]}]]}]}], "}"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.801579943564382*^9},
 CellLabel->"Out[81]=",ExpressionUUID->"bb777bb6-dcbb-44e3-ba0a-f9cf5194614d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Limit", "[", 
  RowBox[{
   RowBox[{"x", "\[RightArrow]", "\[Infinity]"}], ",", 
   FractionBox[
    RowBox[{
     SuperscriptBox["x", "2"], "\[Minus]", "4"}], 
    RowBox[{"2", "+", "x", "-", 
     RowBox[{"4", 
      SuperscriptBox["x", "2"]}]}]]}], "]"}]], "Input",
 CellChangeTimes->{{3.8015799736640034`*^9, 3.80158003688221*^9}},
 CellLabel->"In[82]:=",ExpressionUUID->"a53c12e5-1c93-4c8b-b4ad-95683efa08f7"],

Cell[BoxData[
 TemplateBox[{
  "Limit", "lim", 
   "\"Limit specification \\!\\(\\*FractionBox[RowBox[{RowBox[{\\\"-\\\", \
\\\"4\\\"}], \\\"+\\\", SuperscriptBox[\\\"x\\\", \\\"2\\\"]}], RowBox[{\\\"2\
\\\", \\\"+\\\", \\\"x\\\", \\\"-\\\", RowBox[{\\\"4\\\", \\\" \\\", \
SuperscriptBox[\\\"x\\\", \\\"2\\\"]}]}]]\\) is not of the form x -> x0.\"", 
   2, 82, 30, 23180306378915507075, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.801580037622097*^9},
 CellLabel->
  "During evaluation of \
In[82]:=",ExpressionUUID->"b73deb37-0c70-4b55-b748-5a8e43f8ebc8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Limit", "[", 
  RowBox[{
   FractionBox[
    RowBox[{
     RowBox[{"-", "4"}], "+", 
     SuperscriptBox["x", "2"]}], 
    RowBox[{"2", "+", "x", "-", 
     RowBox[{"4", " ", 
      SuperscriptBox["x", "2"]}]}]], ",", 
   RowBox[{"x", "\[RightArrow]", "\[Infinity]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.801580050658474*^9, 3.8015800536497297`*^9}},
 CellLabel->"In[83]:=",ExpressionUUID->"f559c3a1-5445-4297-968d-1a9a3fe57eb7"],

Cell[BoxData[
 TemplateBox[{
  "Limit", "lim", 
   "\"Limit specification \\!\\(\\*RowBox[{\\\"x\\\", \\\"\[RightArrow]\\\", \
\\\"\[Infinity]\\\"}]\\) is not of the form x -> x0.\"", 2, 83, 31, 
   23180306378915507075, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.8015800549179173`*^9},
 CellLabel->
  "During evaluation of \
In[83]:=",ExpressionUUID->"b2b78434-ab9d-467b-a1d7-ccf81f4fb108"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Limit", "[", 
  RowBox[{
   FractionBox[
    RowBox[{
     RowBox[{"-", "4"}], "+", 
     SuperscriptBox["x", "2"]}], 
    RowBox[{"2", "+", "x", "-", 
     RowBox[{"4", " ", 
      SuperscriptBox["x", "2"]}]}]], ",", 
   RowBox[{"x", "\[Rule]", " ", "\[Infinity]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8015800752003736`*^9, 3.8015800904282184`*^9}},
 CellLabel->"In[84]:=",ExpressionUUID->"9ae21b11-8057-476b-8bbd-0fcb9976e113"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Limit", "[", 
  RowBox[{
   FractionBox[
    RowBox[{
     RowBox[{"6", "/", "x"}], "-", "2"}], 
    RowBox[{"3", "-", 
     RowBox[{"4", "x"}], "+", "x\.b2"}]], ",", 
   RowBox[{"x", "\[Rule]", "3"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8015801802518044`*^9, 3.8015802150536222`*^9}},
 CellLabel->"In[85]:=",ExpressionUUID->"d5353521-271c-404d-9363-b3b6e96ff6f6"],

Cell[BoxData["0"], "Output",
 CellChangeTimes->{3.8015802173166113`*^9},
 CellLabel->"Out[85]=",ExpressionUUID->"8eb1e2ad-efd3-4429-8aec-153be13f73ab"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Limit", "[", 
  RowBox[{
   FractionBox[
    RowBox[{"x\.b2", "-", "1"}], 
    RowBox[{"Abs", "[", 
     RowBox[{"x", "+", "1"}], "]"}]], ",", 
   RowBox[{"x", "\[Rule]", 
    RowBox[{"-", "1"}]}], ",", " ", 
   RowBox[{"Direction", "\[Rule]", "\"\<FromAbove\>\""}]}], "]"}]], "Input",
 CellChangeTimes->{{3.801580262361083*^9, 3.801580288514304*^9}, {
  3.801580354792508*^9, 3.8015805179166274`*^9}, {3.8015805540752363`*^9, 
  3.8015805617881603`*^9}},
 CellLabel->"In[95]:=",ExpressionUUID->"b966ec43-93c8-44c5-bc34-45e76346c82e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{"-", "1"}], "+", "x\.b2"}], ")"}], " ", "\[Infinity]"}]], "Output",
 CellChangeTimes->{{3.8015803554943976`*^9, 3.801580384950775*^9}, {
   3.801580415275326*^9, 3.8015805071631746`*^9}, 3.8015805633853683`*^9},
 CellLabel->"Out[95]=",ExpressionUUID->"10fa4618-a4a4-47b9-a7ca-18e52b2a910a"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Derivitives", "Chapter",
 CellChangeTimes->{{3.8015806169207506`*^9, 
  3.8015806476242175`*^9}},ExpressionUUID->"1aae4550-2d8c-4bbf-91e0-\
c723a4900e7e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Limit", "[", 
  RowBox[{
   FractionBox[
    RowBox[{
     RowBox[{"Cos", "[", 
      RowBox[{
       FractionBox["\[Pi]", "6"], "+", "h"}], "]"}], "-", 
     RowBox[{"Cos", "[", 
      FractionBox["\[Pi]", "6"], " ", "]"}]}], "h"], ",", 
   RowBox[{"h", "\[Rule]", "0"}]}], "]"}]], "Input",
 CellEvaluationLanguage->"Python",
 CellChangeTimes->{{3.8015806498930717`*^9, 3.801580760541293*^9}, {
  3.801580807044598*^9, 3.801580810132311*^9}},
 CellLabel->"In[96]:=",ExpressionUUID->"4d20a0db-bd45-4706-9e30-3772a39fbd7c"],

Cell[BoxData[
 RowBox[{"-", 
  FractionBox["1", "2"]}]], "Output",
 CellChangeTimes->{3.801580810783351*^9},
 CellLabel->"Out[96]=",ExpressionUUID->"89359969-aaf5-4d60-b758-c160394b1a60"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "rate of change of x^4 - 5 x = y between 0 and 3 ", Typeset`opts$$ = {
   AppearanceElements -> {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {
       "Result", "Result", 1, 1, "Input", 
        "Solve[Dt[-5 x + x^4 == y[x], x], y'[x]]"}, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}}, 
   Typeset`elements$$ = {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "Input", "numsubpods" -> "1", 
     "position" -> "100", "scanner" -> "Identity", "title" -> 
     "Input interpretation"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Dt[x^4 - 5 x == y[x], x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"differentiate\"", {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{
                    SuperscriptBox["x", "4"], "-", 
                    RowBox[{"5", " ", "x"}]}], "\[LongEqual]", "y"}], 
                    HoldForm], 
                    PolynomialForm[#, TraditionalOrder -> False]& ], 
                    StyleBox["\"with respect to\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "x"}}, GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None, None, None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    $CellContext`TagBoxWrapper["Separator" -> " "]], 
                   LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                  BaselinePosition -> Center]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               ColumnsEqual -> False, RowsEqual -> False, 
               GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
               AllowScriptLevelChange -> False], 
              $CellContext`TagBoxWrapper["Separator" -> " "]], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "Result", "numsubpods" -> "1", 
     "position" -> "200", "primary" -> "true", "scanner" -> "Derivative", 
     "title" -> "Result"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Solve[Dt[-5 x + x^4 == y[x], x], y'[x]]"}], 
       XMLElement["moutput", {}, {"y'[x] == -5 + 4 x^3"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{
                SuperscriptBox["y", "\[Prime]", MultilineFunction -> None], 
                "(", "x", ")"}], "\[LongEqual]", 
              TagBox[
               RowBox[{
                 RowBox[{"4", " ", 
                   SuperscriptBox["x", "3"]}], "-", "5"}], Identity]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Result__Step-by-step solution", "stepbystep" -> "true"}, {}]}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"error" -> "false", "id" -> "AlternateForm", "numsubpods" -> "1", 
     "position" -> "300", "scanner" -> "Simplification", "title" -> 
     "Alternate form"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"FullSimplify[y'[x] == -5 + 4 x^3]"}], 
       XMLElement["moutput", {}, {"4 x^3 == 5 + y'[x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{"4", " ", 
                SuperscriptBox["x", "3"]}], "\[LongEqual]", 
              RowBox[{
                RowBox[{
                  SuperscriptBox["y", "\[Prime]", MultilineFunction -> None], 
                  "(", "x", ")"}], "+", "5"}]}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {True, False, {False}, True},
    Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement["warnings", {"count" -> "1"}, {
      XMLElement[
      "reinterpret", {
       "text" -> "Using closest Wolfram|Alpha interpretation:", "new" -> 
        "rate of change of x^4 - 5 x = y", "score" -> "0.6444444444444445", 
        "level" -> "high"}, {}]}]}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "3", "datatypes" -> 
    "D", "timedout" -> "", "timedoutpods" -> "", "timing" -> "11.674", 
    "parsetiming" -> "3.39", "parsetimedout" -> "false", "recalculate" -> "", 
    "id" -> "MSP408623892a6bg94943g3000013g7407d642347d3", "host" -> 
    "https://www5a.wolframalpha.com", "server" -> "51", "related" -> "", 
    "version" -> "2.6"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 2., 
    "Date" -> {2020, 6, 19, 20, 45, 43.8953205`9.394993096233318}, "Line" -> 
    98, "SessionID" -> 23180306378915507075}, Typeset`showpods$$ = {1, 2, 3}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "Result", "Result", 1, 1, "Input", 
    "Solve[Dt[-5 x + x^4 == y[x], x], y'[x]]"}, Typeset`open$$ = False, 
   Typeset`newq$$ = "rate of change of x^4 - 5 x = y between 0 and 3 "}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$}, Typeset`chosen$$, 
        Typeset`open$$, Typeset`elements$$, Typeset`q$$, Typeset`opts$$, 
        Typeset`nonpods$$, Typeset`queryinfo$$, Typeset`sessioninfo$$, 
        Typeset`showpods$$, Typeset`failedpods$$, Typeset`newq$$}]], 
     StandardForm],
    ImageSizeCache->{603., {100., 27.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}], 
       Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",
 CellLabel->"In[98]:=",ExpressionUUID->"9e7efe68-26b5-437e-8920-3e8d8df97f08"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{
     SuperscriptBox["y", "\[Prime]",
      MultilineFunction->None], "[", "x", "]"}], "\[Rule]", 
    RowBox[{
     RowBox[{"-", "5"}], "+", 
     RowBox[{"4", " ", 
      SuperscriptBox["x", "3"]}]}]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{3.8015811439153147`*^9},
 CellLabel->"Out[98]=",ExpressionUUID->"fd63b9a8-95e9-4328-b297-6087e4961f0d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"D", "[", 
  RowBox[{
   RowBox[{
    SuperscriptBox["x", "4"], "-", 
    RowBox[{"5", "x"}]}], ",", "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.8015812242020783`*^9, 3.8015812910801144`*^9}},
 CellLabel->"In[99]:=",ExpressionUUID->"86c4eee5-1735-4a1d-aeef-96708c262aba"],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", "5"}], "+", 
  RowBox[{"4", " ", 
   SuperscriptBox["x", "3"]}]}]], "Output",
 CellChangeTimes->{3.8015812920238223`*^9},
 CellLabel->"Out[99]=",ExpressionUUID->"4852a649-a0a4-433a-a052-cee979c5d3af"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"-", "5"}], "+", 
    RowBox[{"4", " ", 
     SuperscriptBox["x", "3"]}]}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "1.9574338205844317`"}], ",", "1.9574338205844317`"}], 
    "}"}]}], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->
  "In[100]:=",ExpressionUUID->"8594c1dc-762b-4a93-a5b5-c7ed32f31d84"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
2VaFOTXy/5/ngd7QC+VbW2rk/wH9Mg9R
       "]]},
     Annotation[#, "Charting`Private`Tag$71515#1"]& ]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-1.9574338205844317`, 
   1.9574338205844317`}, {-34.99999632653076, 24.99999632653076}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.8015812996412497`*^9},
 CellLabel->
  "Out[100]=",ExpressionUUID->"468daf89-f7f0-4658-ab11-2ed20e9b78d7"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.8015813177243466`*^9, 
  3.80158134582894*^9}},ExpressionUUID->"280eb429-8a26-49f4-86d2-\
92eff0d6d894"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"2", 
     SuperscriptBox["t", "3"]}], "-", 
    RowBox[{"24", 
     SuperscriptBox["t", "2"]}], "+", 
    RowBox[{"90", "t"}], "+", "7"}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", "0", ",", "8"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8015813674545803`*^9, 3.801581453083044*^9}},
 CellLabel->
  "In[102]:=",ExpressionUUID->"dfdc2437-1cfa-4bcb-a842-1f00790722f8"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1:eJwV13k8VF8UAHD7jCUxM9a0CT8kKSKFOZWKLMlSzHtkS9EmKZIkIWUtKkIU
ItlDsmWNkGRvIVtIspSElN/pr/l8P+/Ne+eee9+55661P216hIONjS2VnY3t
36863+vCqQ99zNQ9mcNJ83tB9sDEaHXwEHNOkSbzucAAPJo1mdEzX5jC56uf
Vh4wAbF84V529knmyyTL+R2HTaFwYFfTG63vzJCY/e9PHjKHKpf4FVbjM8zh
kDHur5SD8FNOe3nmyV/MBttRgQqnQ8Ax/0RohewC01w8+eqBTEtY8XrnD+bG
BWavy+eT2bmWoPbgXYej5gLTzzHIh6/QEo7oU2KzjBaY9iocokXlllAfYy+7
8/wCM9Nug+r0G0sI3yaxzblugakzmPT2w7QlSHkHOjxz/s3UUlg9f1fVCtSX
bAvNshaZ3HOlVZ1ZVmBoVOG3u2iRuXFfQuOZPCtwiF29X6NqkZlkZ7qHr9AK
IjR6RyQ7F5kF5wWiVMus4MtpQmLgzyKz1uJ38tFGK4jrs/B2NfrDtHolpXNw
xArYq/btDB3/w0yP2mJpupIFTf5qzS8Vl5jPlX9dmbjCgm3LGzlublliSj2R
uqcUwIK0GDsNApaY6ww9h48GseBqVljipMUSM0LKd3VnGN7fPeomfmWJ2fEu
SulmLN6/Pl7MpWuJmd7zxdcvnwU7v/jl8OxkA7e6BT/LIRZcUG5uOL6XDXpD
tMZ0RliQc1bic4shG5h6ySZJj7Fg1d9sidhDbJD37d6ygUkWzNN6/DaeZANr
ia5e+I33a2lYWEazwWzsE7gsTMDqiK/zjyfYQILfx41bi4Byu8uP836wgaYR
b89xHQJsVOlWJXNs4M8Wzd8CBMR1bitq4mCHdomyZzd3EyC+8sb5SVF2+JhL
t1swJoCWLv9DjckOtwwOJ9jZEcBdc2T8RTg7qLzs5A71JyD59nxsfRQ7uBne
cMgMJED3aKjB2xh2iNFWim8MIsCPryB9IIkdXr3YmsoeSsBfEy5n7iJ20Om1
W29+m4C5noef9/Xh8w/ZxUamEPD116feDhUOMP140eJKDQGFR8Or9qlzQLbf
+YTAlwT4duk8erGdA5qIR1eu1xMg+iz+5OM9HLDF3Z0W1ETAzvPEojfJAeO9
Z3yPtRNwb6ZTQiaIA4pSlB2eDRKgN/3a3O0TByjujf4WyUYC3e7S1pEhDhBj
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
       "]]},
     Annotation[#, "Charting`Private`Tag$72188#1"]& ]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 47.95031436405889},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  ImageSize->{412.9857720908875, Automatic},
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0, 8}, {47.95031436405889, 168.4422687066392}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.8015814309395313`*^9, 3.801581454260359*^9}},
 CellLabel->
  "Out[102]=",ExpressionUUID->"5a9ace87-9a97-4bc8-bb9a-941874600c00"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Limit", "[", 
  RowBox[{
   FractionBox[
    RowBox[{"Log", "[", "x", "]"}], 
    SuperscriptBox["x", "2"]], ",", 
   RowBox[{"x", "\[Rule]", "Infinity"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.80158151374901*^9, 3.8015815879454393`*^9}},
 CellLabel->
  "In[103]:=",ExpressionUUID->"adb0eb58-809e-48ef-85f6-15a1a6c46eff"],

Cell[BoxData["0"], "Output",
 CellChangeTimes->{3.801581588951166*^9},
 CellLabel->
  "Out[103]=",ExpressionUUID->"7c7624a3-0eb5-4862-8f00-2d5f632610f9"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"f", "[", "x_", "]"}], ":=", 
   RowBox[{
    SuperscriptBox["x", "3"], "+", 
    RowBox[{"5", 
     SuperscriptBox["x", "2"]}], "-", 
    RowBox[{"7", "x"}], "-", "1"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"g", " ", ":=", " ", 
   RowBox[{"D", "[", 
    RowBox[{
     RowBox[{"f", "[", "x", "]"}], ",", "x"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.801581616228479*^9, 3.8015818767637386`*^9}},
 CellLabel->
  "In[124]:=",ExpressionUUID->"3f235e82-5622-44a0-a3e5-b3cb31cb3790"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"g", "[", "1", "]"}]], "Input",
 CellChangeTimes->{{3.8015818603210144`*^9, 3.8015818628757095`*^9}},
 CellLabel->
  "In[122]:=",ExpressionUUID->"5b994a97-f1d6-47d2-94c0-e745e65cc87a"],

Cell[BoxData[
 TemplateBox[{
  "General", "ivar", 
   "\"\\!\\(\\*RowBox[{\\\"1\\\"}]\\) is not a valid variable.\"", 2, 122, 37,
    23180306378915507075, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.801581863446041*^9},
 CellLabel->
  "During evaluation of \
In[122]:=",ExpressionUUID->"69a2ff06-0268-48cb-b591-33cb8d1f243e"],

Cell[BoxData[
 RowBox[{
  SubscriptBox["\[PartialD]", "1"], 
  RowBox[{"(", 
   RowBox[{"-", "2"}], ")"}]}]], "Output",
 CellChangeTimes->{3.8015818634530425`*^9},
 CellLabel->
  "Out[122]=",ExpressionUUID->"28d5204c-a682-4d0a-bd90-eba7f7b80186"]
}, Open  ]],

Cell[BoxData["g"], "Input",
 CellChangeTimes->{3.801581871361684*^9},
 CellLabel->
  "In[126]:=",ExpressionUUID->"f633a7fc-8015-4945-bc21-bf85bcb0205d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"scrr", "[", "x_", "]"}], ":=", 
  RowBox[{
   RowBox[{"-", "7"}], "+", 
   RowBox[{"10", " ", "x"}], "+", 
   RowBox[{"3", " ", 
    SuperscriptBox["x", "2"]}]}]}]], "Input",
 CellChangeTimes->{{3.8015819577348785`*^9, 3.801581998074298*^9}, {
  3.801582094315474*^9, 3.8015820943941255`*^9}, {3.801582148330638*^9, 
  3.8015821498661156`*^9}, {3.8015821913610406`*^9, 3.8015821922640533`*^9}},
 CellLabel->
  "In[135]:=",ExpressionUUID->"2dab94b1-084a-4999-9485-4fab7ad057c7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"scrr", "[", "1", "]"}]], "Input",
 CellChangeTimes->{{3.8015822011420264`*^9, 3.801582205791817*^9}},
 CellLabel->
  "In[136]:=",ExpressionUUID->"d895b88e-09cd-427a-a649-086f82b38500"],

Cell[BoxData["6"], "Output",
 CellChangeTimes->{3.8015822064636116`*^9},
 CellLabel->
  "Out[136]=",ExpressionUUID->"b8f73970-a3e4-4002-af2e-87236e5ab5a8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"c8", "[", "x_", "]"}], ":=", 
   RowBox[{
    SuperscriptBox["x", "2"], 
    SuperscriptBox["\[ExponentialE]", "x"]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"c8", "'"}], "[", "1", "]"}]}], "Input",
 CellChangeTimes->{{3.8015822444317417`*^9, 3.801582308423238*^9}},
 CellLabel->
  "In[143]:=",ExpressionUUID->"0906d3f0-41e9-4307-91e8-a52700e199f6"],

Cell[BoxData[
 RowBox[{"3", " ", "\[ExponentialE]"}]], "Output",
 CellChangeTimes->{{3.801582292120672*^9, 3.8015823095613422`*^9}},
 CellLabel->
  "Out[144]=",ExpressionUUID->"4cc68b79-8b7f-4b45-a687-4d43f3cfcc0d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"c10", "[", "t_", "]"}], ":=", 
   FractionBox[
    RowBox[{"Log", "[", 
     RowBox[{
      RowBox[{"5", "t"}], "+", "1"}], "]"}], 
    SqrtBox[
     RowBox[{"t", "+", "1"}]]]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"c10", "'"}], "[", "0", "]"}]}], "Input",
 CellChangeTimes->{{3.8015823889158893`*^9, 3.801582452236931*^9}},
 CellLabel->
  "In[145]:=",ExpressionUUID->"4db87179-2b75-4b3b-bec4-d62b175949c4"],

Cell[BoxData["5"], "Output",
 CellChangeTimes->{3.8015824531734753`*^9},
 CellLabel->
  "Out[146]=",ExpressionUUID->"1f187ed5-e447-47f6-844e-ae6d86c24326"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1920, 997},
WindowMargins->{{-8, Automatic}, {-7, Automatic}},
TaggingRules->{
 "SlideshowSettings" -> {"Toolbar" -> True}, "TryRealOnly" -> False},
Magnification:>1.5 Inherited,
FrontEndVersion->"12.1 for Microsoft Windows (64-bit) (June 9, 2020)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"d7e69c18-a5d5-4492-a009-358fddf8568a"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 165, 3, 99, "Section",ExpressionUUID->"24849ddf-4649-48cc-b43a-ba6c21602bd9"],
Cell[CellGroupData[{
Cell[770, 29, 155, 3, 80, "Subsection",ExpressionUUID->"7156ced0-7cd4-4c01-82ad-ca191c77149d"],
Cell[928, 34, 23411, 435, 123, "WolframAlphaShortInput",ExpressionUUID->"2975ce12-a737-4c67-ae99-fa4aba4b7077"],
Cell[24342, 471, 26160, 496, 93, "WolframAlphaShortInput",ExpressionUUID->"f2d98b55-74c0-4fbc-98c5-2f0b4e0cde88"],
Cell[50505, 969, 1506, 40, 77, InheritFromParent,ExpressionUUID->"5c1873f8-d453-45f1-a713-e61e26a2947b"],
Cell[CellGroupData[{
Cell[52036, 1013, 14801, 362, 97, "WolframAlphaShortInput",ExpressionUUID->"6f5b6e5f-aab8-4d20-b093-f27b27389549"],
Cell[66840, 1377, 214, 5, 70, "Output",ExpressionUUID->"7c5ef4ea-67ea-4f15-8dbe-4c4a184b1844"]
}, Open  ]],
Cell[CellGroupData[{
Cell[67091, 1387, 371, 9, 48, "Input",ExpressionUUID->"dafc6a82-d294-4eba-a37d-b9766780ab0c"],
Cell[67465, 1398, 392, 11, 49, "Output",ExpressionUUID->"b7c5fc0f-6747-4016-add6-53fdc263f9dd"]
}, Open  ]],
Cell[CellGroupData[{
Cell[67894, 1414, 260, 5, 43, "Input",ExpressionUUID->"9bd37480-cdf1-4118-9143-b16476a55fef"],
Cell[68157, 1421, 155, 2, 49, "Output",ExpressionUUID->"7d4f12c4-527b-4156-8d8b-ff2bff9052f7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[68349, 1428, 375, 9, 43, "Input",ExpressionUUID->"65bcf61a-5d69-48f3-bd00-6bb2b645e01b"],
Cell[68727, 1439, 378, 10, 69, "Output",ExpressionUUID->"840378ea-c011-48a5-86ee-a67e2803999a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[69142, 1454, 402, 10, 48, "Input",ExpressionUUID->"b30da5a0-4f75-4b8e-919f-3747d9727cab"],
Cell[69547, 1466, 392, 11, 48, "Output",ExpressionUUID->"d9eae492-c19f-4e12-b864-90898880f3eb"]
}, Open  ]],
Cell[69954, 1480, 345, 9, 46, "Input",ExpressionUUID->"499bb61e-594e-419e-b1f2-d6d9e9781000"],
Cell[CellGroupData[{
Cell[70324, 1493, 245, 5, 42, "Input",ExpressionUUID->"8e15c069-9dc2-42be-ab6e-c1e464b0f120"],
Cell[70572, 1500, 474, 15, 72, "Output",ExpressionUUID->"4cc0950a-5940-488f-aa76-d5ea3736edb1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[71083, 1520, 497, 16, 66, "Input",ExpressionUUID->"2495dd87-bab0-4b41-94e2-d3609d9fe12a"],
Cell[71583, 1538, 292, 8, 48, "Output",ExpressionUUID->"94127b31-5e0c-49d3-8dbc-2d24a34d07f2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[71912, 1551, 364, 9, 46, "Input",ExpressionUUID->"6c486502-f02e-4a25-8f2a-746e03d87c7f"],
Cell[72279, 1562, 434, 13, 52, "Output",ExpressionUUID->"e187d475-db38-4bbb-a0c3-19bc95457830"]
}, Open  ]],
Cell[CellGroupData[{
Cell[72750, 1580, 426, 14, 46, "Input",ExpressionUUID->"d355c15b-4f75-4ae5-8930-9798bbabd8fc"],
Cell[73179, 1596, 359, 9, 48, "Output",ExpressionUUID->"c3855735-7d5b-4160-a14d-16b2a102f055"]
}, Open  ]],
Cell[CellGroupData[{
Cell[73575, 1610, 14354, 350, 92, "WolframAlphaShortInput",ExpressionUUID->"2a720f39-83df-4aa8-9bf8-bc01b2c9066f"],
Cell[87932, 1962, 176, 3, 48, "Output",ExpressionUUID->"a734749a-1828-40df-b60f-18d0e3a32db8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[88145, 1970, 193, 3, 42, "Input",ExpressionUUID->"e39fdece-cafd-48ec-81f0-c3273b5a9476"],
Cell[88341, 1975, 175, 3, 48, "Output",ExpressionUUID->"49c9bebf-1e1f-4f13-9b91-946412c39ff6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[88553, 1983, 391, 10, 42, "Input",ExpressionUUID->"4ef7b293-ff4f-477f-aaa5-d094e8a3293d"],
Cell[88947, 1995, 255, 5, 48, "Output",ExpressionUUID->"ee6e4230-d945-4d3d-9124-ca7b1d1a69d6"]
}, Open  ]],
Cell[89217, 2003, 16009, 395, 97, "WolframAlphaShortInput",ExpressionUUID->"5294a13c-10a0-494f-aba6-98b2a35e11e7"],
Cell[CellGroupData[{
Cell[105251, 2402, 364, 9, 46, "Input",ExpressionUUID->"1748e564-b155-4a8a-87ac-1dbaf0e9e8aa"],
Cell[105618, 2413, 353, 9, 48, "Output",ExpressionUUID->"70cdd8b6-2ddd-49a2-aebb-7a8b1aebe2e5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[106008, 2427, 195, 3, 42, "Input",ExpressionUUID->"75ea28cd-26c8-4572-ab93-cfd130ecdd82"],
Cell[106206, 2432, 169, 3, 68, "Output",ExpressionUUID->"671780b0-3ceb-4251-aacd-436c19e95876"]
}, Open  ]],
Cell[CellGroupData[{
Cell[106412, 2440, 175, 4, 62, "Input",ExpressionUUID->"9c3a550f-44b0-4a57-b373-e352c041cde7"],
Cell[106590, 2446, 167, 2, 48, "Output",ExpressionUUID->"e903954b-b279-4a7e-bb7f-415f66d12fbc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[106794, 2453, 205, 3, 42, "Input",ExpressionUUID->"d2ba002d-0fb1-47c2-8838-9ccf8a02a458"],
Cell[107002, 2458, 179, 3, 48, "Output",ExpressionUUID->"9314d341-6c09-49ff-80b8-94075537bad7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[107218, 2466, 324, 8, 42, "Input",ExpressionUUID->"07c388d0-3319-4e95-92b3-cde85c43c996"],
Cell[107545, 2476, 226, 4, 68, "Output",ExpressionUUID->"57694e7c-7a17-43d0-9afe-2e89ce327597"]
}, Open  ]],
Cell[CellGroupData[{
Cell[107808, 2485, 706, 17, 42, "Input",ExpressionUUID->"f8c419af-effc-47fc-8878-c3c7ca27b29c"],
Cell[108517, 2504, 429, 11, 48, "Output",ExpressionUUID->"5b451770-a98d-45a9-a2da-7f2635c0c9d8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[108983, 2520, 521, 15, 42, "Input",ExpressionUUID->"97278927-beb9-47f0-b295-15bbd5cae344"],
Cell[109507, 2537, 375, 10, 48, "Output",ExpressionUUID->"c389bd4d-69f1-4452-b94c-9a9bd2e3aee4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[109919, 2552, 201, 3, 42, "Input",ExpressionUUID->"eddf3dca-ddfc-466a-8d5d-f1cadc153ca9"],
Cell[110123, 2557, 371, 10, 48, "Output",ExpressionUUID->"24c25d1a-9696-4d48-8805-6c1e8a5c3d89"]
}, Open  ]],
Cell[CellGroupData[{
Cell[110531, 2572, 32576, 658, 87, "WolframAlphaShortInput",ExpressionUUID->"86d9be6b-d0e5-4b7f-8252-5f17fc00a00a"],
Cell[143110, 3232, 2150, 60, 88, "Output",ExpressionUUID->"f4f9e8b5-de57-4a39-a854-76af2400eaa4"]
}, Open  ]],
Cell[145275, 3295, 181, 3, 42, "Input",ExpressionUUID->"fa4ea15e-d332-4b94-87f2-985572cf7836"],
Cell[145459, 3300, 2551, 71, 90, "WolframAlphaShortInput",ExpressionUUID->"04d00477-d951-44fc-8db0-81ea7522f440"],
Cell[CellGroupData[{
Cell[148035, 3375, 343, 8, 42, "Input",ExpressionUUID->"5eea84a2-9950-424c-9bcb-d0aafcdabe34"],
Cell[148381, 3385, 497, 11, 34, "Message",ExpressionUUID->"0b2fda87-a612-43f1-8a1b-ccc2c1f0d2fa"]
}, Open  ]],
Cell[CellGroupData[{
Cell[148915, 3401, 341, 8, 62, InheritFromParent,ExpressionUUID->"4188b152-cd19-405a-9703-f20f0983e982"],
Cell[149259, 3411, 448, 10, 34, "Message",ExpressionUUID->"f5b0e655-fd7f-4c6f-94bb-a0fd6f63010c"],
Cell[149710, 3423, 431, 10, 34, "Message",ExpressionUUID->"80f92f94-1f29-4c92-8e92-809c05c16e7c"],
Cell[150144, 3435, 254, 6, 48, "Output",ExpressionUUID->"b850697f-66d0-4441-b61b-b1ddfd02545f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[150435, 3446, 229, 4, 42, "Input",ExpressionUUID->"53906930-4d31-4958-806a-54416612b861"],
Cell[150667, 3452, 204, 4, 68, "Output",ExpressionUUID->"92777595-7376-491c-a1d4-fed15d52a536"]
}, Open  ]],
Cell[CellGroupData[{
Cell[150908, 3461, 299, 7, 72, "Input",ExpressionUUID->"67b995d7-0df6-499b-a293-a346d63e306f"],
Cell[151210, 3470, 411, 10, 34, "Message",ExpressionUUID->"099ad4aa-c9e0-4cfa-94fa-c04229388b0b"],
Cell[151624, 3482, 224, 5, 64, "Output",ExpressionUUID->"199dbe08-7f40-4e78-a16e-bf054e88c48e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[151885, 3492, 359, 9, 42, "Input",ExpressionUUID->"59237455-c95a-41b1-9b25-a7c60eca60e8"],
Cell[152247, 3503, 417, 9, 51, "Message",ExpressionUUID->"e6f7c893-5161-498a-8f77-024171b5593d"],
Cell[152667, 3514, 2661, 62, 360, "Output",ExpressionUUID->"89a59b32-7889-4613-a35b-e9e7f9797e10"]
}, Open  ]],
Cell[CellGroupData[{
Cell[155365, 3581, 203, 3, 42, "Input",ExpressionUUID->"d963d9ec-7a74-461c-887d-f873ff20c57e"],
Cell[155571, 3586, 2707, 63, 122, "Output",ExpressionUUID->"480dbaa7-4e18-4434-a184-926cafb0b26f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[158315, 3654, 369, 10, 70, "Input",ExpressionUUID->"44600480-47c9-4a25-8aa7-5ac0f2866dfe"],
Cell[158687, 3666, 402, 10, 34, "Message",ExpressionUUID->"f1bb259e-ac64-4ced-a408-5904bda96bb6"],
Cell[159092, 3678, 443, 10, 62, "Message",ExpressionUUID->"5b0198a1-73c4-4e47-b270-3bd0fe33f984"],
Cell[159538, 3690, 320, 8, 73, "Output",ExpressionUUID->"2b06e8d1-da7f-4e3f-93ba-157135f7b31c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[159895, 3703, 203, 3, 42, "Input",ExpressionUUID->"938bae5f-6a25-4f5a-bec0-571e83404e02"],
Cell[160101, 3708, 677, 19, 64, "Output",ExpressionUUID->"39b1ced2-8978-44ee-8806-ec790d5a1051"]
}, Open  ]],
Cell[CellGroupData[{
Cell[160815, 3732, 40618, 832, 87, "WolframAlphaShortInput",ExpressionUUID->"54716a7d-e838-4df9-bc4f-0932e11a0dc6"],
Cell[201436, 4566, 1476, 39, 108, "Output",ExpressionUUID->"e20ba9bc-e19f-4111-8768-b093bee0c5e6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[202949, 4610, 201, 3, 42, "Input",ExpressionUUID->"efb1b35e-1827-4adf-9365-d66ce2f00309"],
Cell[203153, 4615, 1452, 39, 108, "Output",ExpressionUUID->"ae0fdc42-f7b3-40a3-850f-6b1cb914cbe5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[204642, 4659, 243, 5, 42, "Input",ExpressionUUID->"2f957717-15c5-449a-898c-1fc4692ecda2"],
Cell[204888, 4666, 169, 3, 48, "Output",ExpressionUUID->"e170a973-f356-4f54-a4ce-fcbcbac7287d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[205094, 4674, 375, 10, 85, "Input",ExpressionUUID->"59d37f11-40c0-4dd9-948f-695a9fe9841c"],
Cell[205472, 4686, 282, 8, 69, "Output",ExpressionUUID->"9a86d611-2859-4f9f-afdc-e2d94c9550a7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[205791, 4699, 105906, 2018, 1538, "WolframAlphaShortInput",ExpressionUUID->"c092da98-531d-44b6-8935-91d6b1da8e8d"],
Cell[311700, 6719, 284, 8, 69, "Output",ExpressionUUID->"fcfee951-125b-4ef9-884f-366f7bb43d6e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[312021, 6732, 403, 11, 48, "Input",ExpressionUUID->"38f96df9-562c-4b23-b8f4-d792f5adf125"],
Cell[312427, 6745, 352, 9, 49, "Output",ExpressionUUID->"d33b7154-932d-4ca9-977e-cb9c3dff9f5c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[312816, 6759, 594, 14, 50, "Input",ExpressionUUID->"95e2453b-aa32-4fe0-9d29-41b338e56e46"],
Cell[313413, 6775, 362, 9, 35, "Message",ExpressionUUID->"d6099e2b-4eff-4245-9035-27e310379b31"],
Cell[313778, 6786, 427, 13, 73, "Output",ExpressionUUID->"bb777bb6-dcbb-44e3-ba0a-f9cf5194614d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[314242, 6804, 438, 11, 77, "Input",ExpressionUUID->"a53c12e5-1c93-4c8b-b4ad-95683efa08f7"],
Cell[314683, 6817, 585, 12, 64, "Message",ExpressionUUID->"b73deb37-0c70-4b55-b748-5a8e43f8ebc8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[315305, 6834, 458, 12, 77, InheritFromParent,ExpressionUUID->"f559c3a1-5445-4297-968d-1a9a3fe57eb7"],
Cell[315766, 6848, 420, 10, 35, "Message",ExpressionUUID->"b2b78434-ab9d-467b-a1d7-ccf81f4fb108"]
}, Open  ]],
Cell[316201, 6861, 459, 12, 77, InheritFromParent,ExpressionUUID->"9ae21b11-8057-476b-8bbd-0fcb9976e113"],
Cell[CellGroupData[{
Cell[316685, 6877, 393, 10, 71, "Input",ExpressionUUID->"d5353521-271c-404d-9363-b3b6e96ff6f6"],
Cell[317081, 6889, 151, 2, 49, "Output",ExpressionUUID->"8eb1e2ad-efd3-4429-8aec-153be13f73ab"]
}, Open  ]],
Cell[CellGroupData[{
Cell[317269, 6896, 558, 13, 75, "Input",ExpressionUUID->"b966ec43-93c8-44c5-bc34-45e76346c82e"],
Cell[317830, 6911, 354, 7, 49, "Output",ExpressionUUID->"10fa4618-a4a4-47b9-a7ca-18e52b2a910a"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[318245, 6925, 160, 3, 102, "Chapter",ExpressionUUID->"1aae4550-2d8c-4bbf-91e0-c723a4900e7e"],
Cell[CellGroupData[{
Cell[318430, 6932, 546, 14, 82, "Input",ExpressionUUID->"4d20a0db-bd45-4706-9e30-3772a39fbd7c"],
Cell[318979, 6948, 187, 4, 69, "Output",ExpressionUUID->"89359969-aaf5-4d60-b758-c160394b1a60"]
}, Open  ]],
Cell[CellGroupData[{
Cell[319203, 6957, 12086, 241, 152, "WolframAlphaShortInput",ExpressionUUID->"9e7efe68-26b5-437e-8920-3e8d8df97f08"],
Cell[331292, 7200, 421, 12, 54, "Output",ExpressionUUID->"fd63b9a8-95e9-4328-b297-6087e4961f0d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[331750, 7217, 296, 7, 48, "Input",ExpressionUUID->"86c4eee5-1735-4a1d-aeef-96708c262aba"],
Cell[332049, 7226, 239, 6, 49, "Output",ExpressionUUID->"4852a649-a0a4-433a-a052-cee979c5d3af"]
}, Open  ]],
Cell[CellGroupData[{
Cell[332325, 7237, 401, 13, 48, "Input",ExpressionUUID->"8594c1dc-762b-4a93-a5b5-c7ed32f31d84"],
Cell[332729, 7252, 10924, 199, 359, "Output",ExpressionUUID->"468daf89-f7f0-4658-ab11-2ed20e9b78d7"]
}, Open  ]],
Cell[343668, 7454, 153, 3, 43, "Input",ExpressionUUID->"280eb429-8a26-49f4-86d2-92eff0d6d894"],
Cell[CellGroupData[{
Cell[343846, 7461, 450, 13, 48, "Input",ExpressionUUID->"dfdc2437-1cfa-4bcb-a842-1f00790722f8"],
Cell[344299, 7476, 10255, 187, 402, "Output",ExpressionUUID->"5a9ace87-9a97-4bc8-bb9a-941874600c00"]
}, Open  ]],
Cell[CellGroupData[{
Cell[354591, 7668, 348, 9, 72, "Input",ExpressionUUID->"adb0eb58-809e-48ef-85f6-15a1a6c46eff"],
Cell[354942, 7679, 153, 3, 49, "Output",ExpressionUUID->"7c7624a3-0eb5-4862-8f00-2d5f632610f9"]
}, Open  ]],
Cell[355110, 7685, 578, 17, 102, "Input",ExpressionUUID->"3f235e82-5622-44a0-a3e5-b3cb31cb3790"],
Cell[CellGroupData[{
Cell[355713, 7706, 207, 4, 43, "Input",ExpressionUUID->"5b994a97-f1d6-47d2-94c0-e745e65cc87a"],
Cell[355923, 7712, 354, 9, 35, "Message",ExpressionUUID->"69a2ff06-0268-48cb-b591-33cb8d1f243e"],
Cell[356280, 7723, 246, 7, 49, "Output",ExpressionUUID->"28d5204c-a682-4d0a-bd90-eba7f7b80186"]
}, Open  ]],
Cell[356541, 7733, 152, 3, 43, "Input",ExpressionUUID->"f633a7fc-8015-4945-bc21-bf85bcb0205d"],
Cell[356696, 7738, 512, 12, 43, InheritFromParent,ExpressionUUID->"2dab94b1-084a-4999-9485-4fab7ad057c7"],
Cell[CellGroupData[{
Cell[357233, 7754, 208, 4, 43, "Input",ExpressionUUID->"d895b88e-09cd-427a-a649-086f82b38500"],
Cell[357444, 7760, 155, 3, 49, "Output",ExpressionUUID->"b8f73970-a3e4-4002-af2e-87236e5ab5a8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[357636, 7768, 411, 11, 73, "Input",ExpressionUUID->"0906d3f0-41e9-4307-91e8-a52700e199f6"],
Cell[358050, 7781, 215, 4, 64, "Output",ExpressionUUID->"4cc68b79-8b7f-4b45-a687-4d43f3cfcc0d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[358302, 7790, 470, 14, 113, "Input",ExpressionUUID->"4db87179-2b75-4b3b-bec4-d62b175949c4"],
Cell[358775, 7806, 155, 3, 49, "Output",ExpressionUUID->"1f187ed5-e447-47f6-844e-ae6d86c24326"]
}, Open  ]]
}, Open  ]]
}
]
*)

